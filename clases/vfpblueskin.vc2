*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="vfpblueskin.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS __placeholder_effect AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="GrayLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="BlueLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_placeholdertext1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrAnimate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="VerticalLine1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="VerticalLine2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: resetcontrols
		*m: themecolor_assign
		*m: value_access
		*m: value_assign
		*p: effect
		*p: isrequired
		*p: line1finished
		*p: line2finished
		*p: ncounter
		*p: placeholder
		*p: startorcloseanimation
		*p: themecolor
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	effect = 1
	Height = 36
	isrequired = .F.
	line1finished = .F.
	line2finished = .F.
	Name = "__placeholder_effect"
	ncounter = 0
	placeholder = 
	startorcloseanimation = .F.
	themecolor = RGB(51,153,255)
	value = 		&& Specifies the current state of a control.
	Width = 219

	ADD OBJECT '_placeholdertext1' AS _placeholdertext WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		FontSize = 12, ;
		ForeColor = 117,117,117, ;
		Height = 28, ;
		Left = 2, ;
		Margin = 2, ;
		Name = "_placeholdertext1", ;
		Top = 2, ;
		Width = 215
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="textbox" />

	ADD OBJECT 'BlueLine' AS line WITH ;
		BorderColor = 51,153,255, ;
		BorderWidth = 2, ;
		Height = 0, ;
		Left = 2, ;
		Name = "BlueLine", ;
		Top = 33, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'GrayLine' AS line WITH ;
		BorderColor = 204,204,204, ;
		BorderWidth = 2, ;
		Height = 0, ;
		Left = 2, ;
		Name = "GrayLine", ;
		Top = 33, ;
		Width = 215
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackStyle = 0, ;
		BorderColor = 51,153,255, ;
		BorderWidth = 2, ;
		Height = 36, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 0, ;
		Visible = .F., ;
		Width = 219
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'TmrAnimate' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 2, ;
		Left = 0, ;
		Name = "TmrAnimate", ;
		Top = -24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'VerticalLine1' AS line WITH ;
		BorderColor = 51,153,255, ;
		BorderWidth = 2, ;
		Height = 12, ;
		Left = 0, ;
		Name = "VerticalLine1", ;
		Top = 38, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'VerticalLine2' AS line WITH ;
		BorderColor = 51,153,255, ;
		BorderWidth = 2, ;
		Height = 12, ;
		Left = 0, ;
		Name = "VerticalLine2", ;
		Top = 38, ;
		Width = 0
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE Init
		WITH THIS
			.GrayLine.VISIBLE 		= .T.
			.BlueLine.VISIBLE 		= .T.
			.verticalLine1.VISIBLE	= .F.
			.verticalLine2.VISIBLE	= .F.
		
			.TmrAnimate.INTERVAL = 2
		
			IF INLIST(.EFFECT, 7, 8, 9)
				WITH .SHAPE1
					.WIDTH 		 = .WIDTH
					.HEIGHT 	 = .HEIGHT
					.LEFT 		 = 0
					.TOP 		 = 0
					.BORDERCOLOR = RGB(204, 204, 204)
					.VISIBLE	 = .T.
				ENDWITH
			ENDIF
			.resetControls()
		ENDWITH
	ENDPROC

	PROCEDURE resetcontrols
		#DEFINE BRING_TO_FRONT 	0
		WITH THIS
			DO CASE
			CASE .EFFECT = 1
				WITH .BlueLine
					.WIDTH 	= 0
					.LEFT 	= THIS.GrayLine.LEFT
					.TOP  	= THIS.GrayLine.TOP
				ENDWITH
			CASE .EFFECT = 2
				WITH .BlueLine
					.WIDTH 	= 0
					.LEFT 	= THIS.GrayLine.WIDTH / 2
					.TOP  	= THIS.GrayLine.TOP
				ENDWITH
			CASE .EFFECT = 3
				WITH .BlueLine
					.LEFT 	= THIS.GrayLine.LEFT
					.TOP  	= THIS.GrayLine.TOP
					.WIDTH 	= THIS.GrayLine.WIDTH
					THIS.GrayLine.ZORDER(BRING_TO_FRONT)
				ENDWITH
			CASE .EFFECT = 4
				.TmrAnimate.INTERVAL = 10
				.GrayLine.VISIBLE 	 = .F.
				.BlueLine.VISIBLE 	 = .F.
		
				WITH .SHAPE1
					.WIDTH 	 = THIS.WIDTH
					.HEIGHT  = 2
					.LEFT 	 = 0
					.TOP 	 = THIS.HEIGHT - 2
					.VISIBLE = .F.
				ENDWITH
			CASE .EFFECT = 5
				.GrayLine.VISIBLE = .F.
				.BlueLine.VISIBLE = .F.
				WITH .SHAPE1
					.WIDTH 	 = 2
					.HEIGHT  = THIS.HEIGHT
					.LEFT 	 = 0
					.TOP 	 = 0
					.VISIBLE = .F.
				ENDWITH
			CASE .EFFECT = 6
				.GrayLine.VISIBLE = .F.
				.BlueLine.VISIBLE = .F.
				WITH .SHAPE1
					.WIDTH 	 = 2
					.HEIGHT  = THIS.HEIGHT
					.LEFT 	 = THIS.WIDTH - 2
					.TOP 	 = 0
					.VISIBLE = .F.
				ENDWITH
			CASE .EFFECT = 7
				.nCounter 				= 0
				WITH .verticalLine1
					.LEFT 		= 1
					.HEIGHT 	= 0
					.TOP 		= THIS.HEIGHT / 2
					.VISIBLE	= .F.
				ENDWITH
				WITH .verticalLine2
					.LEFT 		= THIS.WIDTH - 1
					.HEIGHT 	= 0
					.TOP 		= THIS.HEIGHT / 2
					.VISIBLE	= .F.
				ENDWITH
		*-- Top Horizontal Line
				WITH .GrayLine
					.LEFT 			= THIS.WIDTH / 2
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.BORDERCOLOR 	= EVALUATE(this.ThemeColor)
					.TOP 			= 1
					.VISIBLE		= .F.
				ENDWITH
		*-- Bottom Horizontal Line
				WITH .BlueLine
					.LEFT 			= THIS.WIDTH / 2
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.TOP 			= THIS.HEIGHT - 1
					.VISIBLE		= .F.
				ENDWITH
			CASE .EFFECT = 8
				.nCounter 				= 0
				WITH .verticalLine1
					.LEFT 		= 1
					.HEIGHT 	= 0
					.TOP 		= 1
					.VISIBLE	= .F.
				ENDWITH
				WITH .verticalLine2
					.LEFT 		= THIS.WIDTH - 1
					.HEIGHT 	= 0
					.TOP 		= THIS.HEIGHT - 1
					.VISIBLE	= .F.
				ENDWITH
		
		*-- Top Horizontal Line
				WITH .GrayLine
					.LEFT 			= 1
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.BORDERCOLOR 	= EVALUATE(this.ThemeColor)
					.TOP 			= 1
					.VISIBLE		= .F.
				ENDWITH
		*-- Bottom Horizontal Line
				WITH .BlueLine
					.LEFT 			= THIS.WIDTH - 1
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.TOP 			= THIS.HEIGHT - 1
					.VISIBLE		= .F.
				ENDWITH
			CASE .EFFECT = 9
				.nCounter = 0
				WITH .verticalLine1
					.LEFT 		= 1
					.HEIGHT 	= 0
					.TOP 		= 1
					.VISIBLE	= .F.
				ENDWITH
		
				WITH .verticalLine2
					.LEFT 		= THIS.WIDTH - 1
					.HEIGHT 	= 0
					.TOP 		= THIS.HEIGHT - 1
					.VISIBLE	= .F.
				ENDWITH
		
		*-- Top Horizontal Line
				WITH .GrayLine
					.LEFT 			= THIS.WIDTH - 1
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.BORDERCOLOR 	= EVALUATE(this.ThemeColor)
					.TOP 			= 1
					.VISIBLE		= .F.
				ENDWITH
		*-- Bottom Horizontal Line
				WITH .BlueLine
					.LEFT 			= 1
					.BORDERWIDTH   	= 2
					.WIDTH 			= 0
					.TOP 			= THIS.HEIGHT - 1
					.VISIBLE		= .F.
				ENDWITH
			OTHERWISE
			ENDCASE
		ENDWITH
		
	ENDPROC

	PROCEDURE themecolor_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.THEMECOLOR = m.vNewVal
		THIS.BLUeLine.BORDERCOLOR = THIS.THEMECOLOR
		THIS.VERticalLine1.BORDERCOLOR = THIS.THEMECOLOR
		THIS.VERticalLine2.BORDERCOLOR = THIS.THEMECOLOR
		DO CASE
		CASE INLIST(THIS.EFFECT, 4, 5, 6)
			THIS.shape1.BORDERCOLOR = THIS.THEMECOLOR
		CASE INLIST(THIS.EFFECT, 7, 8, 9)
			THIS.grayLine.BORDERCOLOR = THIS.THEMECOLOR
		ENDCASE
	ENDPROC

	PROCEDURE value_access
		*To do: Modify this routine for the Access method
		RETURN THIS._placeholdertext1.VALUE
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS._placeholdertext1.VALUE = m.vNewVal
		
	ENDPROC

	PROCEDURE TmrAnimate.Timer
		WITH THIS.PARENT
			IF !.StartOrCloseAnimation
		*-- Start Animation
				DO CASE
				CASE .effect = 1
					.BlueLine.VISIBLE = .T.
					IF .BlueLine.WIDTH < .GrayLine.WIDTH
						.BlueLine.WIDTH = .BlueLine.WIDTH + 1
					ELSE
						THIS.ENABLED = .F.
					ENDIF
		
				CASE .effect = 2
					.BlueLine.VISIBLE = .T.
					IF .BlueLine.WIDTH < .GrayLine.WIDTH
						.BlueLine.WIDTH = .BlueLine.WIDTH + 1
						.BlueLine.LEFT 	= (.GrayLine.WIDTH / 2) - .BlueLine.WIDTH / 2
					ELSE
						THIS.ENABLED = .F.
					ENDIF
		
				CASE .effect = 3
					.GrayLine.VISIBLE = .T.
					.BlueLine.VISIBLE = .T.
					IF .GrayLine.WIDTH > 0
						.GrayLine.WIDTH = .GrayLine.WIDTH - 1
						.GrayLine.LEFT 	= (.BlueLine.WIDTH / 2) - .GrayLine.WIDTH / 2
					ELSE
						.GrayLine.VISIBLE 	= .F.
						THIS.ENABLED 		= .F.
					ENDIF
		
				CASE .effect = 4
					.SHAPE1.VISIBLE = .T.
					IF .SHAPE1.TOP > 0
						.SHAPE1.TOP 	= .SHAPE1.TOP - 1
						.SHAPE1.HEIGHT 	= .SHAPE1.HEIGHT + 1
					ELSE
						THIS.ENABLED 	= .F.
					ENDIF
		
				CASE .effect = 5
					.SHAPE1.VISIBLE = .T.
					IF .SHAPE1.WIDTH < .WIDTH
						.SHAPE1.WIDTH 	= .SHAPE1.WIDTH + 1
					ELSE
						THIS.ENABLED 	= .F.
					ENDIF
		
				CASE .effect = 6
					.SHAPE1.VISIBLE = .T.
					IF .SHAPE1.WIDTH < .WIDTH
						.SHAPE1.WIDTH 	= .SHAPE1.WIDTH + 1
						.SHAPE1.LEFT 	= .SHAPE1.LEFT - 1
					ELSE
						THIS.ENABLED = .F.
					ENDIF
		
				CASE .effect = 7
					.SHAPE1.VISIBLE = .F.
					.nCounter 		= .nCounter + 1
		
					IF MOD(.nCounter, 7) = 0
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT < .HEIGHT
							.verticalLine1.HEIGHT 	= .verticalLine1.HEIGHT + 1
							.verticalLine1.TOP 		= (.HEIGHT / 2) - .verticalLine1.HEIGHT / 2
						ENDIF
					ENDIF
		
					IF MOD(.nCounter, 7) = 0
						.verticalLine2.VISIBLE = .T.
						IF .verticalLine2.HEIGHT < .HEIGHT
							.verticalLine2.HEIGHT 	= .verticalLine2.HEIGHT + 1
							.verticalLine2.TOP 		= (.HEIGHT / 2) - .verticalLine2.HEIGHT / 2
						ENDIF
					ENDIF
		
					.GrayLine.VISIBLE 	= .T.
					IF .GrayLine.WIDTH < (.WIDTH - 2)
						.GrayLine.WIDTH = .GrayLine.WIDTH + 1
						.GrayLine.LEFT 	= (.WIDTH / 2) - .GrayLine.WIDTH / 2
					ENDIF
		
					.BlueLine.VISIBLE = .T.
					IF .BlueLine.WIDTH < (.WIDTH - 2)
						.BlueLine.WIDTH = .BlueLine.WIDTH + 1
						.BlueLine.LEFT 	= (.WIDTH / 2) - .BlueLine.WIDTH / 2
					ELSE
						.verticalLine1.TOP 	 	= 0
						.verticalLine1.HEIGHT 	= .HEIGHT
						.verticalLine2.TOP 	 	= 0
						.verticalLine2.HEIGHT 	= .HEIGHT
						.nCounter 			 	= 0
						THIS.ENABLED 			= .F.
					ENDIF
		
				CASE .effect = 8
					.SHAPE1.VISIBLE = .F.
					.nCounter 		= .nCounter + 1
		
					IF MOD(.nCounter, 7) = 0
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT < .HEIGHT
							.verticalLine1.HEIGHT = .verticalLine1.HEIGHT + 1
						ENDIF
					ENDIF
		
					IF MOD(.nCounter, 7) = 0
						.verticalLine2.VISIBLE = .T.
						IF .verticalLine2.HEIGHT < .HEIGHT
							.verticalLine2.HEIGHT 	= .verticalLine2.HEIGHT + 1
							.verticalLine2.TOP 		= .verticalLine2.TOP - 1
						ENDIF
					ENDIF
		
					.GrayLine.VISIBLE = .T.
					IF .GrayLine.WIDTH < (.WIDTH - 2)
						.GrayLine.WIDTH = .GrayLine.WIDTH + 1
					ENDIF
		
					.BlueLine.VISIBLE = .T.
					IF .BlueLine.WIDTH < (.WIDTH - 2)
						.BlueLine.WIDTH = .BlueLine.WIDTH + 1
						.BlueLine.LEFT 	= .BlueLine.LEFT - 1
					ELSE
						.verticalLine1.TOP 	 	= 0
						.verticalLine1.HEIGHT 	= .HEIGHT
						.verticalLine2.TOP 	 	= 0
						.verticalLine2.HEIGHT 	= .HEIGHT
						.nCounter 			 	= 0
						THIS.ENABLED 			= .F.
					ENDIF
		
				CASE .effect = 9
					.SHAPE1.VISIBLE = .F.
					.nCounter 		= .nCounter + 1
					IF MOD(.nCounter, 2) = 0 AND !.Line1Finished
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT < .HEIGHT
							.verticalLine1.HEIGHT = .verticalLine1.HEIGHT + 1
						ELSE
							.Line1Finished = .T.
						ENDIF
					ENDIF
					IF .Line1Finished
						.BlueLine.VISIBLE = .T.
						IF .BlueLine.WIDTH < .WIDTH
							.BlueLine.WIDTH = .BlueLine.WIDTH + 1
						ELSE
							IF MOD(.nCounter, 2) = 0 AND !.Line2Finished
								.verticalLine2.VISIBLE = .T.
								IF .verticalLine2.HEIGHT < .HEIGHT
									.verticalLine2.HEIGHT 	= .verticalLine2.HEIGHT + 1
									.verticalLine2.TOP 		= .verticalLine2.TOP - 1
								ELSE
									.Line2Finished = .T.
								ENDIF
							ENDIF
							IF .Line2Finished
								.GrayLine.VISIBLE = .T.
								IF .GrayLine.WIDTH < (.WIDTH - 2)
									.GrayLine.WIDTH = .GrayLine.WIDTH + 1
									.GrayLine.LEFT 	= .GrayLine.LEFT - 1
								ELSE
									.verticalLine1.TOP 	 	= 0
									.verticalLine1.HEIGHT 	= .HEIGHT
									.verticalLine2.TOP 	 	= 0
									.verticalLine2.HEIGHT 	= .HEIGHT
									.nCounter 			 	= 0
									.Line1Finished		 	= .F.
									.Line2Finished		 	= .F.
									THIS.ENABLED 			= .F.
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				OTHERWISE
				ENDCASE
			ELSE
		*-- Close Animation
				DO CASE
				CASE .effect = 1
					IF .BlueLine.WIDTH > 0
						.BlueLine.WIDTH = .BlueLine.WIDTH - 1
					ELSE
						.BlueLine.VISIBLE 	= .F.
						THIS.ENABLED 		= .F.
					ENDIF
		
				CASE .effect = 2
					IF .BlueLine.WIDTH > 0
						.BlueLine.WIDTH = .BlueLine.WIDTH - 1
						.BlueLine.LEFT 	= (.GrayLine.WIDTH / 2) - .BlueLine.WIDTH / 2
					ELSE
						.BlueLine.VISIBLE 	= .F.
						THIS.ENABLED 		= .F.
					ENDIF
		
				CASE .effect = 3
					.GrayLine.VISIBLE = .T.
					IF .GrayLine.WIDTH < .BlueLine.WIDTH
						.GrayLine.WIDTH = .GrayLine.WIDTH + 1
						.GrayLine.LEFT 	= (.BlueLine.WIDTH / 2) - .GrayLine.WIDTH / 2
					ELSE
						.BlueLine.VISIBLE 	= .F.
						THIS.ENABLED 		= .F.
					ENDIF
		
				CASE .effect = 4
					THIS.ENABLED = .F.
					this.Parent.resetcontrols()
					
				CASE .effect = 5
					THIS.ENABLED = .F.
					this.Parent.resetcontrols()
					
				CASE .effect = 6
					THIS.ENABLED = .F.
					this.Parent.resetcontrols()
					
				CASE .effect = 7			
					.SHAPE1.VISIBLE = .T.
					.nCounter 		= .nCounter + 1
					IF MOD(.nCounter, 7) = 0
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT > 0
							.verticalLine1.HEIGHT = .verticalLine1.HEIGHT - 1
							.verticalLine1.TOP = (.HEIGHT / 2) - .verticalLine1.HEIGHT / 2
						ENDIF
					ENDIF
		
					IF MOD(.nCounter, 7) = 0
						.verticalLine2.VISIBLE = .T.
						IF .verticalLine2.HEIGHT > 0
							.verticalLine2.HEIGHT = .verticalLine2.HEIGHT - 1
							.verticalLine2.TOP = (.HEIGHT / 2) - .verticalLine2.HEIGHT / 2
						ENDIF
					ENDIF
		
					IF .GrayLine.WIDTH > 0
						.GrayLine.WIDTH = .GrayLine.WIDTH - 1
						.GrayLine.LEFT = (.WIDTH / 2) - .GrayLine.WIDTH / 2
					ENDIF
		
					IF .BlueLine.WIDTH > 0
						.BlueLine.WIDTH = .BlueLine.WIDTH - 1
						.BlueLine.LEFT = (.WIDTH / 2) - .BlueLine.WIDTH / 2
					ELSE
						.verticalLine1.VISIBLE  = .F.
						.verticalLine2.VISIBLE  = .F.
						.GrayLine.VISIBLE 		= .F.
						.BlueLine.VISIBLE 		= .F.
						THIS.ENABLED 			= .F.
					ENDIF
				CASE .effect = 8
					.SHAPE1.VISIBLE 	= .T.
					.nCounter 			= .nCounter + 1
					IF MOD(.nCounter, 7) = 0
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT > 0
							.verticalLine1.HEIGHT = .verticalLine1.HEIGHT - 1
						ENDIF
					ENDIF
					IF MOD(.nCounter, 7) = 0
						.verticalLine2.VISIBLE = .T.
						IF .verticalLine2.HEIGHT > 0
							.verticalLine2.HEIGHT = .verticalLine2.HEIGHT - 1
							.verticalLine2.TOP = .verticalLine2.TOP + 1
						ENDIF
					ENDIF
		
					.GrayLine.VISIBLE = .T.
					IF .GrayLine.WIDTH > 0
						.GrayLine.WIDTH = .GrayLine.WIDTH - 1
					ENDIF
		
					.BlueLine.VISIBLE = .T.
					IF .BlueLine.WIDTH > 0
						.BlueLine.WIDTH = .BlueLine.WIDTH - 1
						.BlueLine.LEFT = .BlueLine.LEFT + 1
					ELSE
						.verticalLine1.VISIBLE 	= .F.
						.verticalLine2.VISIBLE 	= .F.
						.GrayLine.VISIBLE 		= .F.
						.BlueLine.VISIBLE 		= .F.
						THIS.ENABLED 			= .F.
					ENDIF
				CASE .effect = 9
					.SHAPE1.VISIBLE = .T.
					.nCounter 		= .nCounter + 1
					IF MOD(.nCounter, 2) = 0 AND !.Line1Finished
						.verticalLine1.VISIBLE = .T.
						IF .verticalLine1.HEIGHT > 0
							.verticalLine1.HEIGHT = .verticalLine1.HEIGHT - 1
						ELSE
							.Line1Finished = .T.
						ENDIF
					ENDIF
		
					IF .Line1Finished
						.GrayLine.VISIBLE = .T.
						IF .GrayLine.WIDTH > 0
							.GrayLine.WIDTH = .GrayLine.WIDTH - 1
							.GrayLine.LEFT 	= .GrayLine.LEFT + 1
						ELSE
							IF MOD(.nCounter, 2) = 0 AND !.Line2Finished
								.verticalLine2.VISIBLE = .T.
								IF .verticalLine2.HEIGHT > 0
									.verticalLine2.HEIGHT 	= .verticalLine2.HEIGHT - 1
									.verticalLine2.TOP 		= .verticalLine2.TOP + 1
								ELSE
									.Line2Finished = .T.
								ENDIF
							ENDIF
							IF .Line2Finished
								.BlueLine.VISIBLE = .T.
								IF .BlueLine.WIDTH > 0
									.BlueLine.WIDTH = .BlueLine.WIDTH - 1
								ELSE
									.verticalLine1.VISIBLE 	= .F.
									.verticalLine2.VISIBLE 	= .F.
									.Line1Finished			= .F.
									.Line2Finished			= .F.
									.GrayLine.VISIBLE 		= .F.
									.BlueLine.VISIBLE 		= .F.
									THIS.ENABLED 			= .F.
								ENDIF
							ENDIF
						ENDIF
					ENDIF
				OTHERWISE
				ENDCASE
			ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE _placeholdertext1.GotFocus
		DODEFAULT()
		this.Parent.StartOrCloseAnimation = .F.
		this.Parent.tmrAnimate.Enabled = .t.
	ENDPROC

	PROCEDURE _placeholdertext1.Init
		THIS.placeholder = THIS.PARENT.placeholder
		DODEFAULT()
		this.BackColor = thisform.BackColor
	ENDPROC

	PROCEDURE _placeholdertext1.LostFocus
		DODEFAULT()
		WITH THIS.PARENT
			.StartOrCloseAnimation 	= .T.	
			.tmrAnimate.ENABLED 	= .T.
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS __textboxeffect AS container 		&& Estilo Gmail
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPlaceHolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrFadeOut" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRequired" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrFadeIn" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: applytheme_assign
		*m: evaluaterequired
		*m: value_access
		*m: value_assign
		*p: applytheme
		*p: cvalidatemessage
		*p: isrequired
		*p: placeholder
		*p: stylebackcolor
		*p: styleforecolor
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	applytheme = .F.
	BackStyle = 0
	BorderWidth = 0
	cvalidatemessage = Este campo es requerido
	Height = 50
	isrequired = .F.
	Name = "__textboxeffect"
	placeholder = 
	stylebackcolor = RGB(255,255,255)
	styleforecolor = RGB(0, 0, 0)
	value = 		&& Specifies the current state of a control.
	Width = 216

	ADD OBJECT 'lblPlaceHolder' AS label WITH ;
		Alignment = 2, ;
		AutoSize = .T., ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		Caption = "Text1", ;
		FontName = "Tahoma", ;
		ForeColor = 128,128,128, ;
		Height = 16, ;
		Left = 14, ;
		MousePointer = 3, ;
		Name = "lblPlaceHolder", ;
		Top = 14, ;
		Width = 35
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRequired' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 217,48,37, ;
		Height = 15, ;
		Left = 16, ;
		Name = "lblRequired", ;
		Top = 35, ;
		Visible = .F., ;
		Width = 33
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		BorderColor = 0,102,204, ;
		BorderWidth = 1, ;
		Curvature = 5, ;
		Height = 27, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 7, ;
		Width = 216
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		FontName = "Tahoma", ;
		Height = 20, ;
		Left = 11, ;
		Name = "Text1", ;
		Top = 13, ;
		Width = 193
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TmrFadeIn' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 4, ;
		Left = 24, ;
		Name = "TmrFadeIn", ;
		Top = -24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'TmrFadeOut' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 4, ;
		Left = 0, ;
		Name = "TmrFadeOut", ;
		Top = -24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE applytheme_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.APPLYTHEME = m.vNewVal
		IF THIS.APPLYTHEME
			THIS.REFRESH()
		ENDIF
	ENDPROC

	PROCEDURE evaluaterequired
		THIS.lblRequired.VISIBLE = (EMPTY(THIS.text1.VALUE) AND THIS.isRequired)
	ENDPROC

	PROCEDURE Init
		WITH THIS
			.lblPlaceHolder.CAPTION = SPACE(1) + .placeHolder + SPACE(1)
			.lblRequired.CAPTION 	= .cValidateMessage
		ENDWITH
		IF TYPE("THISFORM.StyleBackColor") <> "N"
			ADDPROPERTY(THISFORM, "StyleBackColor", RGB(255, 255, 255))
		ENDIF
		IF TYPE("THISFORM.StyleForeColor") <> "N"
			ADDPROPERTY(THISFORM, "StyleForeColor", RGB(68, 68, 68))
		ENDIF
		IF TYPE("THISFORM.StyleBorderColor") <> "N"
			ADDPROPERTY(THISFORM, "StyleBorderColor", RGB(62, 109, 181))
		ENDIF
	ENDPROC

	PROCEDURE Refresh
		WITH THIS
			.shape1.BACKCOLOR 			= THISFORM.StyleBackColor
			.lblPlaceHolder.BACKCOLOR 	= THISFORM.StyleBackColor
			.text1.BACKCOLOR 			= THISFORM.StyleBackColor
		
			.lblPlaceHolder.FORECOLOR 	= THISFORM.StyleBorderColor
			.shape1.BORDERCOLOR 		= THISFORM.StyleBorderColor
			.text1.FORECOLOR 			= THISFORM.StyleForeColor
		ENDWITH
	ENDPROC

	PROCEDURE value_access
		*To do: Modify this routine for the Access method
		RETURN THIS.TEXT1.VALUE
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.tmrFadeOut.ENABLED = .T.
		THIS.TEXT1.VALUE = m.vNewVal
	ENDPROC

	PROCEDURE lblPlaceHolder.Click
		This.parent.Text1.SetFocus()
	ENDPROC

	PROCEDURE Shape1.Click
		This.parent.Text1.SetFocus()
	ENDPROC

	PROCEDURE Shape1.Init
		this.Width = this.Parent.Width
	ENDPROC

	PROCEDURE Text1.GotFocus
		THIS.PARENT.TmrFadeOut.ENABLED = IIF(EMPTY(THIS.VALUE), .T., .F.)
	ENDPROC

	PROCEDURE Text1.Init
		this.Width = this.Parent.Width - 22
	ENDPROC

	PROCEDURE Text1.InteractiveChange
		THIS.PARENT.EvaluateRequired()
		
	ENDPROC

	PROCEDURE Text1.LostFocus
		THIS.PARENT.TmrFadeIn.ENABLED = IIF(EMPTY(THIS.VALUE), .T., .F.)
	ENDPROC

	PROCEDURE Text1.Valid
		THIS.PARENT.EvaluateRequired()
	ENDPROC

	PROCEDURE TmrFadeIn.Timer
		WITH THIS.PARENT
			IF .lblPlaceHolder.TOP = 14
				.lblPlaceHolder.MOUSEPOINTER = 3
				THIS.ENABLED = .F.
			ELSE
				.lblPlaceHolder.TOP 		= .lblPlaceHolder.TOP + 1
				.lblPlaceHolder.FONTSIZE 	= IIF(.lblPlaceHolder.TOP = 8, 8, 9)
			ENDIF
		ENDWITH
	ENDPROC

	PROCEDURE TmrFadeOut.Timer
		WITH THIS.PARENT
			IF .lblPlaceHolder.TOP = 0
				.lblPlaceHolder.MOUSEPOINTER 	= 0
				THIS.ENABLED 					= .F.
			ELSE
				.lblPlaceHolder.TOP 			= .lblPlaceHolder.TOP - 1
				.lblPlaceHolder.FONTSIZE 		= IIF(.lblPlaceHolder.TOP = 8, 9, 8)
			ENDIF
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS _buttonmenubase AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setactive
		*p: defaultitemname
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	defaultitemname = 
	Height = 34
	Name = "_buttonmenubase"
	Width = 200
	
	PROCEDURE Init
		If !Empty(This.defaultitemname)
			this.setActive(This.defaultitemname)
		Endif
	ENDPROC

	PROCEDURE setactive
		Lparameters tcControlName As String
		*!*	Try
		*!*		lcMacro = "This." + tcControlName + ".Click()"
		*!*		&lcMacro
		*!*	Catch
		*!*	Endtry
		Try
			loButton = Evaluate("This." + tcControlName)
			For Each loItem In This.Controls
				loItem.BackStyle = 0
				loItem.BorderWidth = 0
			Endfor
			loButton.BackStyle = 1
			loButton.BorderWidth = 1
		Catch
		Endtry
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _buttonmenuitem AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />

	BackColor = 0,48,86
	BackStyle = 1
	BorderColor = 0,48,86
	Height = 34
	MousePointer = 15
	Name = "_buttonmenuitem"
	Width = 32

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 16, ;
		Left = 8, ;
		MousePointer = 15, ;
		Name = "Image1", ;
		Stretch = 2, ;
		Top = 9, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE Click
		this.Parent.setActive(this.name)
	ENDPROC

	PROCEDURE Init
		this.BorderWidth = 0
		this.BackStyle = 0 
	ENDPROC

	PROCEDURE Image1.Click
		this.Parent.Click()
	ENDPROC

ENDDEFINE

DEFINE CLASS _carousel AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ConSlide" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConArrowRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConArrowRight.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConArrowLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConArrowLeft.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Timer1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addimage		&& Add an Image to Carousel container.
		*m: animate
		*p: canimation
		*p: enableimagetitle
		*p: ncurrentslide
		*p: ntimercount
		*p: ntotalslide
		*p: nwidth
	*</DefinedPropArrayMethod>

	BackColor = 83,83,83
	BackStyle = 1
	BorderWidth = 0
	canimation = 
	enableimagetitle = .F.
	Height = 360
	Name = "_carousel"
	ncurrentslide = 0
	ntimercount = 0
	ntotalslide = 0
	nwidth = 0
	Width = 800

	ADD OBJECT 'ConArrowLeft' AS container WITH ;
		Anchor = 0, ;
		BackColor = 192,192,192, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 360, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "ConArrowLeft", ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConArrowLeft.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 255,255,255, ;
		BackStyle = 0, ;
		Caption = "<", ;
		FontName = "Bahnschrift Condensed", ;
		FontSize = 50, ;
		ForeColor = 255,255,255, ;
		Height = 83, ;
		Left = 40, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 138, ;
		Width = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ConArrowRight' AS container WITH ;
		Anchor = 0, ;
		BackColor = 192,192,192, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 360, ;
		Left = 700, ;
		MousePointer = 15, ;
		Name = "ConArrowRight", ;
		Top = 0, ;
		Width = 100
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConArrowRight.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 255,255,255, ;
		BackStyle = 0, ;
		Caption = ">", ;
		FontName = "Bahnschrift Condensed", ;
		FontSize = 50, ;
		ForeColor = 255,255,255, ;
		Height = 83, ;
		Left = 40, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 138, ;
		Width = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ConSlide' AS container WITH ;
		Anchor = 0, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 360, ;
		Left = 0, ;
		Name = "ConSlide", ;
		Top = 0, ;
		Width = 800
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Timer1' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 1, ;
		Left = 0, ;
		Name = "Timer1", ;
		Top = -24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE addimage		&& Add an Image to Carousel container.
		LPARAMETERS tcImagePath AS Variant, tcTitle AS STRING, tcDescription AS STRING
		TRY
			LOCAL bPictureVal AS Boolean, lcSlideName AS STRING, nLeft AS INTEGER
			bPictureVal = !FILE(tcImagePath)
		
			THIS.nTotalSlide = THIS.nTotalSlide + 1
			THIS.conSlide.WIDTH = THIS.WIDTH * THIS.nTotalSlide
		
			lcSlideName = "_carousel_slide" + ALLTRIM(STR(THIS.nTotalSlide))
		
			IF THIS.nTotalSlide > 1
				lcMacro = "This.ConSlide._carousel_slide" + ALLTRIM(STR((THIS.nTotalSlide - 1))) + ".Left + This.ConSlide._carousel_slide" + ALLTRIM(STR((THIS.nTotalSlide - 1))) + ".Width"
				nLeft 	= &lcMacro
			ELSE
				nLeft 	= 0
			ENDIF
		
			THIS.conSlide.ADDOBJECT(lcSlideName, "_carousel_slide")
		
			lcMacro = "This.ConSlide." + lcSlideName + ".Left = nLeft"
			&lcMacro
		
			lcMacro = "This.ConSlide." + lcSlideName + ".Top = 0"
			&lcMacro
		
			lcMacro = "This.ConSlide." + lcSlideName + ".Width = This.Width"
			&lcMacro
		
			lcMacro = "This.ConSlide." + lcSlideName + ".Height = This.Height"
			&lcMacro
		
			IF bPictureVal
				lcMacro = "This.ConSlide." + lcSlideName + ".Image1.PictureVal = tcImagePath"
			ELSE
				lcMacro = "This.ConSlide." + lcSlideName + ".Image1.Picture = tcImagePath"
			ENDIF
			&lcMacro
		
			lcMacro = "This.ConSlide." + lcSlideName + ".SetTransform(tcTitle, tcDescription)"
			&lcMacro
		
			lcMacro = "This.ConSlide." + lcSlideName + ".Visible =.T."
			&lcMacro
		CATCH TO loEx
			MESSAGEBOX(loEx.MESSAGE, 48, "¡Carousel Class Error!")
		ENDTRY
	ENDPROC

	PROCEDURE animate
	ENDPROC

	PROCEDURE Init
		WITH THIS
			.BACKSTYLE 			= 0
			.nCurrentSlide 		= 1
			nWidth 				= INT(ROUND((.WIDTH * 12.5) / 100,2))
			
			WITH .conArrowLeft
				.WIDTH  		= nWidth
				.TOP   			= 0
				.TOP 	 		= 0
				.HEIGHT 		= THIS.HEIGHT
				.label1.TOP 	= (.HEIGHT / 2) - .label1.HEIGHT / 2
				.label1.LEFT 	= (.WIDTH / 2) - .label1.WIDTH / 2
				.LEFT 			= 0
			ENDWITH
			
			WITH .conArrowRight
				.WIDTH 			= nWidth
				.HEIGHT 		= THIS.HEIGHT
				.label1.TOP 	= (.HEIGHT / 2) - .label1.HEIGHT / 2
				.label1.LEFT 	= (.WIDTH / 2) - .label1.WIDTH / 2
				.LEFT 			= THIS.WIDTH - .WIDTH
			ENDWITH
		
			WITH .conslide
				.LEFT	 	= 0
				.TOP 	 	= 0
				.HEIGHT 	= THIS.HEIGHT
				.WIDTH  	= THIS.WIDTH
			ENDWITH
		ENDWITH
	ENDPROC

	PROCEDURE ConArrowLeft.Click
		IF THIS.PARENT.nCurrentSlide >= 2
			THIS.Parent.cAnimation = "RIGHT"
			THIS.PARENT.timer1.Interval = 1
			THIS.PARENT.timer1.ENABLED = .T.
		ENDIF
	ENDPROC

	PROCEDURE ConArrowLeft.Label1.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE ConArrowLeft.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = RGB(255, 255, 255)
	ENDPROC

	PROCEDURE ConArrowLeft.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = RGB(150, 150, 150)
	ENDPROC

	PROCEDURE ConArrowRight.Click
		IF THIS.PARENT.nCurrentSlide < THIS.PARENT.nTotalSlide
			THIS.Parent.cAnimation = "LEFT"
			THIS.PARENT.timer1.Interval = 1
			THIS.PARENT.timer1.ENABLED = .T.	
		ENDIF
		
	ENDPROC

	PROCEDURE ConArrowRight.Label1.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE ConArrowRight.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = RGB(255, 255, 255)
	ENDPROC

	PROCEDURE ConArrowRight.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = RGB(150, 150, 150)
	ENDPROC

	PROCEDURE Timer1.Timer
		WITH THIS.PARENT
			THIS.ENABLED = .F.
			DO CASE
			CASE .cAnimation = "LEFT"
				IF .nTimerCount <= .Width
					.nTimerCount 	= .nTimerCount + 1
					.conslide.LEFT 	= .conslide.LEFT - 1
					THIS.ENABLED 	= .T.
				ELSE
					THIS.INTERVAL 	= 0
					THIS.ENABLED 	= .F.			
					.nTimerCount 	= 0
					.nCurrentSlide 	= .nCurrentSlide + 1
				ENDIF
			CASE .cAnimation = "RIGHT"
				IF .nTimerCount <= .Width
					.nTimerCount 	= .nTimerCount + 1
					.conslide.LEFT 	= .conslide.LEFT + 1
					THIS.ENABLED 	= .T.
				ELSE
					THIS.INTERVAL 	= 0
					THIS.ENABLED 	= .F.			
					.nTimerCount 	= 0
					.nCurrentSlide 	= .nCurrentSlide - 1
				ENDIF
			OTHERWISE
			ENDCASE
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS _carousel_slide AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle.Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: settransform
		*p: enableimagetitle
		*p: _description
		*p: _title		&& Titulo de la imagen
	*</DefinedPropArrayMethod>

	BackColor = 85,85,85
	BackStyle = 1
	BorderWidth = 0
	enableimagetitle = .F.
	Height = 260
	Name = "_carousel_slide"
	Width = 600
	_description = Descripción de la imagen.
	_title = 		&& Titulo de la imagen

	ADD OBJECT 'ConTitle' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 51, ;
		Left = 0, ;
		Name = "ConTitle", ;
		Top = 206, ;
		Width = 600
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConTitle.Label1' AS label WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Titulo", ;
		FontBold = .T., ;
		FontName = "Trebuchet MS", ;
		FontSize = 12, ;
		ForeColor = 255,255,255, ;
		Height = 24, ;
		Left = 0, ;
		Name = "Label1", ;
		Top = 3, ;
		Width = 600
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ConTitle.Label2' AS label WITH ;
		Alignment = 2, ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Descripción de la Imagen", ;
		FontBold = .F., ;
		FontName = "Trebuchet MS", ;
		FontSize = 10, ;
		ForeColor = 255,255,255, ;
		Height = 20, ;
		Left = 0, ;
		Name = "Label2", ;
		Top = 26, ;
		Width = 600
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Image1' AS image WITH ;
		Anchor = 0, ;
		Height = 260, ;
		Left = 0, ;
		Name = "Image1", ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 600
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE settransform
		LPARAMETERS tcTitle as String, tcDescription as string
		
		THIS.image1.LEFT = 0
		THIS.image1.TOP = 0
		THIS.image1.HEIGHT = THIS.HEIGHT
		THIS.image1.WIDTH = THIS.WIDTH
		
		THIS.conTitle.LEFT = 0
		this.contitle.label1.Left = 0
		this.contitle.label2.Left = 0
		
		THIS.conTitle.WIDTH = THIS.WIDTH
		this.contitle.label1.width = THIS.WIDTH
		this.contitle.label2.width = THIS.WIDTH
		
		THIS.conTitle.TOP = THIS.HEIGHT - THIS.conTitle.HEIGHT
		
		this.contitle.label1.Caption = tcTitle
		this.contitle.label2.Caption = tcDescription
	ENDPROC

ENDDEFINE

DEFINE CLASS _check AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="conCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="conCheck.lblCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: controlsource_access
		*m: controlsource_assign
		*m: setvalue
		*m: value_access
		*m: value_assign
		*p: controlsource		&& Specifies the source of data to which an object is bound.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	controlsource = 		&& Specifies the source of data to which an object is bound.
	Height = 16
	Name = "_check"
	value = .F.		&& Specifies the current state of a control.
	Width = 129

	ADD OBJECT 'conCheck' AS container WITH ;
		BackColor = 247,248,252, ;
		BorderColor = 96,125,139, ;
		Height = 16, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "conCheck", ;
		Top = 0, ;
		Width = 16
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'conCheck.lblCheck' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "a", ;
		FontName = "Marlett", ;
		FontSize = 12, ;
		ForeColor = 247,248,252, ;
		Height = 18, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "lblCheck", ;
		Top = 0, ;
		Visible = .F., ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontName = "Arial", ;
		ForeColor = 16,16,16, ;
		Height = 17, ;
		Left = 21, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 0, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Click
		this.SetValue()
	ENDPROC

	PROCEDURE controlsource_access
		*To do: Modify this routine for the Access method
		RETURN THIS.controlsource
		
	ENDPROC

	PROCEDURE controlsource_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.controlsource = m.vNewVal
		
	ENDPROC

	PROCEDURE Init
		If !Empty(This.ControlSource)
			If !Inlist(Type(Evaluate("this.controlSource")), "L", "N")
				Wait "Invalid ControlSource for CheckBox: " + This.Name Window
				This.ControlSource = ""
			Else
				This.Value = Evaluate(This.ControlSource)
			Endif
		Else
			This.Value = This.Value
		Endif
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.conCheck.BackColor = Rgb(197, 224, 245)
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		If !this.conCHECK.lblCheck.Visible 
			this.conCheck.BackColor = Rgb(247, 248, 252)
		Else
			this.conCheck.BackColor = Rgb(50, 126, 191)
		endif	
	ENDPROC

	PROCEDURE setvalue
		Do Case
		Case Type("This.Value") = "L"
			This.Value = !This.Value
		
		Case Type("This.Value") = "N"
			This.Value = Iif(This.Value = 1, 0, 1)
			
		Otherwise
		Endcase
	ENDPROC

	PROCEDURE value_access
		*To do: Modify this routine for the Access method
		RETURN THIS.value
		
	ENDPROC

	PROCEDURE value_assign
		Lparameters vNewVal
		*To do: Modify this routine for the Assign method
		
		This.Value = m.vNewVal
		If !Empty(This.ControlSource)
			Try
				lcMacro = "REPLACE " + Getwordnum(This.ControlSource, 2, ".") + " WITH This.Value IN " + Getwordnum(This.ControlSource, 1, ".")
				&lcMacro
			Catch To loEx
				Wait "Error in Checkbox " + This.Name + ", Message: " + loEx.Message Window
			Endtry
		Endif
		
		Do Case
		Case Type("This.Value") = "L"
			This.ConCheck.LblCheck.Visible = vNewVal
		
		Case Type("This.Value") = "N"
			This.ConCheck.LblCheck.Visible = Iif(vNewVal=1,.T.,.F.)
		
		Otherwise
		Endcase
		This.ConCheck.BackColor = Iif(This.ConCheck.LblCheck.Visible, Rgb(50, 126, 191), Rgb(247, 248, 252))
		
	ENDPROC

	PROCEDURE conCheck.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE conCheck.lblCheck.Click
		this.Parent.Parent.Click()
	ENDPROC

	PROCEDURE Label1.Click
		this.Parent.Click()
	ENDPROC

ENDDEFINE

DEFINE CLASS _command AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnHidden" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cancel		&& Specifies if a CommandButton is the Cancel button.
		*p: default		&& Specifies which CommandButton responds to the ENTER key being pressed.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	cancel = .F.		&& Specifies if a CommandButton is the Cancel button.
	default = .F.		&& Specifies which CommandButton responds to the ENTER key being pressed.
	Height = 28
	Name = "_command"
	Width = 96

	ADD OBJECT 'btnHidden' AS commandbutton WITH ;
		Caption = "Command1", ;
		Height = 10, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "btnHidden", ;
		Style = 1, ;
		Top = 0, ;
		Width = 12
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontBold = .T., ;
		FontName = "Trebuchet MS", ;
		FontSize = 10, ;
		ForeColor = 255,255,255, ;
		Height = 17, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 96
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 0,120,189, ;
		BorderColor = 0,120,189, ;
		Curvature = 10, ;
		Height = 28, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 96
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Init
		With This.btnHidden
			.Top 	 = 0
			.Left 	 = 0
			.Width 	 = This.Width
			.Height  = This.Height
			.Caption = This.label1.Caption
		Endwith
		
		With This.shape1
			.Top 	= 0
			.Left 	= 0
			.Width 	= This.Width
			.Height = This.Height
		Endwith
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.shape1.BorderColor = Rgb(106,165,222)
		this.shape1.BackColor = Rgb(255,255,255)
		this.label1.ForeColor = Rgb(106,165,222)
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.shape1.BorderColor = Rgb(0,120,189)
		this.shape1.BackColor 	= Rgb(0,120,189)
		this.label1.ForeColor 	= Rgb(255,255,255)
	ENDPROC

	PROCEDURE btnHidden.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE btnHidden.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		If nKeyCode = 13 && ENTER
			this.Parent.Click()
		EndIf
	ENDPROC

	PROCEDURE Label1.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE Shape1.Click
		this.Parent.Click()
	ENDPROC

ENDDEFINE

DEFINE CLASS _messagebox AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Edit1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle.Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConTitle.lblTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConButtons" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConButtons._command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConButtons._command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConButtons._command3" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setvisiblebuttons
		*p: cmessage
		*p: ctitle
		*p: nbuttons
		*p: nicon
		*p: nresult
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BackColor = 10,101,177
	BorderStyle = 1
	Caption = "Form"
	cmessage = 
	ctitle = 
	DoCreate = .T.
	Height = 158
	Name = "_messagebox"
	nbuttons = 0
	nicon = 
	nresult = 0
	TitleBar = 0
	Width = 613

	ADD OBJECT 'ConButtons' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 33, ;
		Left = 103, ;
		Name = "ConButtons", ;
		Top = 118, ;
		Width = 407
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConButtons._command1' AS _command WITH ;
		Height = 31, ;
		Left = 1, ;
		Name = "_command1", ;
		Top = 1, ;
		Width = 130, ;
		Shape1.Height = 31, ;
		Shape1.Name = "Shape1", ;
		Shape1.Width = 130, ;
		btnHidden.Name = "btnHidden", ;
		Label1.Name = "Label1", ;
		Label1.Width = 130
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT 'ConButtons._command2' AS _command WITH ;
		Height = 31, ;
		Left = 139, ;
		Name = "_command2", ;
		Top = 1, ;
		Width = 130, ;
		Shape1.Height = 31, ;
		Shape1.Name = "Shape1", ;
		Shape1.Width = 130, ;
		btnHidden.Name = "btnHidden", ;
		Label1.Name = "Label1", ;
		Label1.Width = 130
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT 'ConButtons._command3' AS _command WITH ;
		Height = 31, ;
		Left = 276, ;
		Name = "_command3", ;
		Top = 1, ;
		Width = 130, ;
		Shape1.Height = 31, ;
		Shape1.Name = "Shape1", ;
		Shape1.Width = 130, ;
		btnHidden.Name = "btnHidden", ;
		Label1.Name = "Label1", ;
		Label1.Width = 130
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT 'ConTitle' AS container WITH ;
		BackColor = 175,197,208, ;
		BorderWidth = 0, ;
		Height = 40, ;
		Left = 0, ;
		Name = "ConTitle", ;
		Top = 0, ;
		Width = 613
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConTitle.Image1' AS image WITH ;
		Height = 22, ;
		Left = 15, ;
		Name = "Image1", ;
		Stretch = 2, ;
		Top = 9, ;
		Width = 22
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'ConTitle.lblTitle' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontSize = 12, ;
		Height = 17, ;
		Left = 48, ;
		Name = "lblTitle", ;
		Top = 12, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Edit1' AS editbox WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledForeColor = 247,248,252, ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontSize = 10, ;
		ForeColor = 247,248,252, ;
		Height = 66, ;
		Left = 12, ;
		Name = "Edit1", ;
		ScrollBars = 0, ;
		Top = 48, ;
		Width = 593
		*< END OBJECT: BaseClass="editbox" />
	
	PROCEDURE setvisiblebuttons
		Lparameters tbVisible As Boolean
		
		With This.conButtons
			._command1.Visible = tbVisible
			._command2.Visible = tbVisible
			._command3.Visible = tbVisible
		Endwith
	ENDPROC

	PROCEDURE Show
		Lparameters nStyle
		
		If Empty(This.cTitle)
			This.cTitle = "Aviso"
		Endif &&EMPTY(tcTitle)
		
		If Empty(This.nButtons)
			This.nButtons = 0
		Endif
		
		This.conTitle.lblTitle.Caption 	= This.cTitle
		This.edit1.Value 				= This.cMessage
		
		Do Case
		Case This.nButtons = 16 &&OK + Stop Sign
			lcImage = "Error"
			This.SetVisibleButtons(.F.)
		
			With This.conButtons
				._command1.Visible = .T.
				._command1.label1.Caption = "Aceptar"
				.Width = ._command1.Width
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
			
		Case This.nButtons = 17 &&OK and Cancel + Stop Sign
			lcImage = "Error"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Aceptar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
		
		Case This.nButtons = 18 &&Abort, Retry, Ignore + Stop Sign
			lcImage = "Error"
		
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Abortar"
				._command2.label1.Caption = "Reintentar"
				._command3.label1.Caption = "Ignorar"
			EndWith
		
		Case This.nButtons = 19 &&Yes, No and Cancel Button + Stop Sign
			lcImage = "Error"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				._command3.label1.Caption = "Cancelar"
			EndWith
		
		Case This.nButtons = 20 &&Yes And  No + Stop Sign
			lcImage = "Error"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
			
		Case This.nButtons = 21 &&Retry and Cancel + Stop Sign
			lcImage = "Error"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Reintentar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
				
		Case This.nButtons = 32 &&OK + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.F.)
		
			With This.conButtons
				._command1.Visible = .T.
				._command1.label1.Caption = "Aceptar"
				.Width = ._command1.Width
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
		Case This.nButtons = 33 &&OK and Cancel + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Aceptar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 34 &&Abort, Retry, Ignore + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Abortar"
				._command2.label1.Caption = "Reintentar"
				._command3.label1.Caption = "Ignorar"
			EndWith
		Case This.nButtons = 35 &&Yes, No and Cancel Button + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				._command3.label1.Caption = "Cancelar"
			EndWith
		Case This.nButtons = 36 &&Yes And  No + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 37 &&Retry and Cancel + Question Mark
			lcImage = "Question"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Reintentar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 48 &&OK + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.F.)
		
			With This.conButtons
				._command1.Visible = .T.
				._command1.label1.Caption = "Aceptar"
				.Width = ._command1.Width
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
		Case This.nButtons = 49 &&OK and Cancel + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Aceptar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 50 &&Abort, Retry, Ignore + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Abortar"
				._command2.label1.Caption = "Reintentar"
				._command3.label1.Caption = "Ignorar"
			EndWith
		Case This.nButtons = 51 &&Yes, No and Cancel Button + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				._command3.label1.Caption = "Cancelar"
			EndWith
		Case This.nButtons = 52 &&Yes And  No + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 53 &&Retry and Cancel + Exclamation Mark
			lcImage = "Warning"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Reintentar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 64 &&OK + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.F.)
		
			With This.conButtons
				._command1.Visible = .T.
				._command1.label1.Caption = "Aceptar"
				.Width = ._command1.Width
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
		Case This.nButtons = 65 &&OK and Cancel + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Aceptar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 66 &&Abort, Retry, Ignore + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Abortar"
				._command2.label1.Caption = "Reintentar"
				._command3.label1.Caption = "Ignorar"
			EndWith
		Case This.nButtons = 67 &&Yes, No and Cancel Button + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				._command3.label1.Caption = "Cancelar"
			EndWith
		Case This.nButtons = 68 &&Yes And  No + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Si"
				._command2.label1.Caption = "No"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Case This.nButtons = 69 &&Retry and Cancel + Information Icon
			lcImage = "Information"
			This.SetVisibleButtons(.T.)
			
			With This.conButtons
				._command3.Visible = .F.
				._command1.label1.Caption = "Reintentar"
				._command2.label1.Caption = "Cancelar"
				.Width = 270
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith	
		Otherwise
			lcImage = "Information"
			This.SetVisibleButtons(.F.)
		
			With This.conButtons
				._command1.Visible = .T.
				._command1.label1.Caption = "Aceptar"
				.Width = ._command1.Width
				.Left  = This.Width / 2 - (.Width / 2)
			EndWith
		EndCase
		
		this.conTitle.image1.Picture = lcImage + ".png"
	ENDPROC

	PROCEDURE ConButtons._command1.Click
		thisform.nResult = 1
		thisform.Hide()
	ENDPROC

	PROCEDURE ConButtons._command2.Click
		thisform.nResult = 2
		thisform.Hide()
	ENDPROC

	PROCEDURE ConButtons._command3.Click
		thisform.nResult = 3
		thisform.Hide()
	ENDPROC

ENDDEFINE

DEFINE CLASS _placeholdertext AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setplaceholder
		*m: value_access
		*p: internal
		*p: placeholder
		*p: valant
	*</DefinedPropArrayMethod>

	HIDDEN internal
	BackColor = 242,242,242
	FontName = "Trebuchet MS"
	FontSize = 17
	ForeColor = 153,153,153
	Height = 42
	internal = .F.
	Name = "_placeholdertext"
	placeholder = 
	SelectOnEntry = .F.
	valant = 
	Width = 290
	
	PROCEDURE GotFocus
		this.internal = .t.
		this.valant = this.value
		this.internal = .f.
		*!*	If Alltrim(this.value) == Alltrim(this.placeholder)
		*!*		this.Value = ""
		*!*		this.FontItalic = .f.
		*!*	EndIf
	ENDPROC

	PROCEDURE Init
		this.setplaceholder()
	ENDPROC

	PROCEDURE InteractiveChange
		THIS.internal = .T.
		DO CASE
		CASE !EMPTY(THIS.VALUE) AND !EMPTY(THIS.placeholder) AND THIS.placeholder$THIS.valant
			THIS.valant 	= ""
			THIS.VALUE 		= STRTRAN(THIS.VALUE, THIS.placeholder)
			THIS.FONTITALIC = .F.
			KEYBOARD '{END}'
		CASE EMPTY(THIS.VALUE) AND !EMPTY(THIS.placeholder)	
			THIS.VALUE 		= THIS.placeholder
			THIS.valant 	= THIS.VALUE
			THIS.FONTITALIC = .T.
		OTHERWISE
		ENDCASE
		THIS.internal = .F.
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
	ENDPROC

	PROCEDURE LostFocus
		this.valant = ""
		this.setplaceholder()
	ENDPROC

	PROCEDURE setplaceholder
		THIS.internal = .T.
		IF !EMPTY(THIS.placeholder) AND EMPTY(THIS.VALUE)
			THIS.VALUE = THIS.placeholder
			THIS.FONTITALIC = .T.
		ENDIF
		THIS.internal = .F.
	ENDPROC

	PROCEDURE value_access
		*To do: Modify this routine for the Access method
		IF THIS.internal
			RETURN THIS.VALUE
		ELSE
			IF !EMPTY(THIS.placeholder) AND ALLTRIM(THIS.VALUE) == ALLTRIM(THIS.placeholder)
				RETURN ""
			ELSE
				RETURN THIS.VALUE
			ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS _popupbutton AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape3" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cpopupname
		*p: popupmenubase		&& Nombre del menu a desplegar.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	cpopupname = 
	Height = 15
	MousePointer = 15
	Name = "_popupbutton"
	popupmenubase = 		&& Nombre del menu a desplegar.
	Width = 17

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 117,146,159, ;
		BorderColor = 117,146,159, ;
		BorderWidth = 1, ;
		Height = 3, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 17
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackColor = 117,146,159, ;
		BorderColor = 117,146,159, ;
		BorderWidth = 1, ;
		Height = 3, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "Shape2", ;
		Top = 5, ;
		Width = 17
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape3' AS shape WITH ;
		BackColor = 117,146,159, ;
		BorderColor = 117,146,159, ;
		BorderWidth = 1, ;
		Height = 3, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "Shape3", ;
		Top = 10, ;
		Width = 17
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Click
		If !Empty(This.popupmenubase)
			If Type("Thisform." + This.cPopupName) = "U"
				This.cPopupName = Sys(2015)
				Thisform.AddObject(This.cPopupName, Juststem(This.ClassLibrary) + "." + This.popupmenubase)
				loPopUp = Evaluate("Thisform." + This.cPopupName)
				loPopUp.Left = (This.Left + this.Width) - loPopUp.Width
				loPopUp.Top  = This.Top + This.Height
				loPopUp.Visible = .T.
			Else
				loPopUp = Evaluate("Thisform." + This.cPopupName)
				loPopUp.Visible = !loPopUp.Visible
			Endif
		Endif
	ENDPROC

	PROCEDURE Shape1.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE Shape2.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE Shape3.Click
		this.Parent.Click()
	ENDPROC

ENDDEFINE

DEFINE CLASS _popupitem AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	BackColor = 33,150,243
	BackStyle = 0
	BorderColor = 33,150,243
	BorderWidth = 0
	Height = 24
	Name = "_popupitem"
	Width = 200

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 1, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 3, ;
		Width = 198
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Init
		this.BackStyle = 0 
		this.BorderWidth = 0
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = Rgb(247, 248, 252)
		this.Backstyle  = 1
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.label1.ForeColor = Rgb(0, 0, 0)
		this.Backstyle  = 0
	ENDPROC

	PROCEDURE Label1.Click
		this.Parent.Click()
	ENDPROC

	PROCEDURE Label1.MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseEnter(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Label1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseLeave(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS _popupmenubase AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_popupitem1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_popupitem2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_popupitem3" UniqueID="" Timestamp="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 89
	Name = "_popupmenubase"
	Width = 193

	ADD OBJECT '_popupitem1' AS _popupitem WITH ;
		BorderWidth = 1, ;
		Height = 24, ;
		Left = 0, ;
		Name = "_popupitem1", ;
		Top = 10, ;
		Width = 188, ;
		Label1.Caption = "Opción 1", ;
		Label1.Height = 17, ;
		Label1.Left = 1, ;
		Label1.Name = "Label1", ;
		Label1.Top = 3, ;
		Label1.Width = 186
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT '_popupitem2' AS _popupitem WITH ;
		BorderWidth = 1, ;
		Height = 24, ;
		Left = 0, ;
		Name = "_popupitem2", ;
		Top = 34, ;
		Width = 188, ;
		Label1.Caption = "Opción 2", ;
		Label1.Height = 17, ;
		Label1.Left = 1, ;
		Label1.Name = "Label1", ;
		Label1.Top = 3, ;
		Label1.Width = 186
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT '_popupitem3' AS _popupitem WITH ;
		BorderWidth = 1, ;
		Height = 24, ;
		Left = 0, ;
		Name = "_popupitem3", ;
		Top = 58, ;
		Width = 188, ;
		Label1.Caption = "Opción 3", ;
		Label1.Height = 17, ;
		Label1.Left = 1, ;
		Label1.Name = "Label1", ;
		Label1.Top = 3, ;
		Label1.Width = 186
		*< END OBJECT: ClassLib="vfpblueskin.vcx" BaseClass="container" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "t", ;
		FontBold = .T., ;
		FontName = "Marlett", ;
		FontSize = 12, ;
		ForeColor = 96,125,139, ;
		Height = 18, ;
		Left = 173, ;
		Name = "Label1", ;
		Top = -3, ;
		Width = 19
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 247,248,252, ;
		BorderColor = 96,125,139, ;
		Curvature = 8, ;
		Height = 78, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 7, ;
		Width = 190
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackColor = 247,248,252, ;
		BorderColor = 127,127,127, ;
		BorderWidth = 2, ;
		Curvature = 8, ;
		Height = 78, ;
		Left = 3, ;
		Name = "Shape2", ;
		Top = 9, ;
		Width = 188
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE _popupitem1.Click
		MessageBox("Opción 1")
	ENDPROC

	PROCEDURE _popupitem2.Click
		MessageBox("Opción 2")
	ENDPROC

	PROCEDURE _popupitem3.Click
		MessageBox("Opción 3")
	ENDPROC

ENDDEFINE

DEFINE CLASS _textbox AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: validate		&& Invoque este método para validar la entrada de datos del usaurio en este control.
		*p: isrequired
		*p: validatedname
		*p: validatemessage		&& Muestra un mensaje indicando al usuario que debe rellenar este campo en caso de ser requerido. Ej. Falta nombre
	*</DefinedPropArrayMethod>

	FontName = "Arial"
	FontSize = 12
	ForeColor = 47,47,47
	Height = 28
	isrequired = .F.
	Margin = 3
	Name = "_textbox"
	SelectOnEntry = .T.
	SpecialEffect = 1
	validatedname = 
	validatemessage = 		&& Muestra un mensaje indicando al usuario que debe rellenar este campo en caso de ser requerido. Ej. Falta nombre
	Width = 250
	
	PROCEDURE GotFocus
		If Type("Thisform." + This.ValidatedName) = "U"
			This.BorderColor = Rgb(199, 160, 85)
		Else
			If Empty(This.Value)
				This.BorderColor = Rgb(211, 47, 47)
			Endif
		Endif
	ENDPROC

	PROCEDURE InteractiveChange
		Do Case
		Case !Empty(This.Value) And Type("Thisform." + This.ValidatedName) = "O"
			lcMacro = "Thisform." + This.ValidatedName + ".Visible = .F."
			&lcMacro
			This.BorderColor = Rgb(199, 160, 85)
			
		Case Empty(This.Value) And Type("Thisform." + This.ValidatedName) = "O"
			This.BorderColor = Rgb(211, 47, 47)
			
		Otherwise
		Endcase
	ENDPROC

	PROCEDURE LostFocus
		If Type("Thisform." + This.ValidatedName) = "U"
			This.BorderColor = Rgb(169, 169, 169)
		Else
			If Empty(This.Value)
				This.BorderColor = Rgb(211, 47, 47)
			Endif
		Endif
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		If Type("Thisform." + This.ValidatedName) = "O" And Empty(This.Value)
			lcMacro = "Thisform." + This.ValidatedName + ".Visible = .T."
			&lcMacro
		Endif
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		If Type("Thisform." + This.ValidatedName) = "O"
			lcMacro = "Thisform." + This.ValidatedName + ".Visible = .F."
			&lcMacro
		Endif
	ENDPROC

	PROCEDURE validate		&& Invoque este método para validar la entrada de datos del usaurio en este control.
		Lparameters tcMessage as string
		If This.isRequired	
			If Empty(tcMessage)
				If !Empty(this.validatemessage)
					tcMessage = this.validatemessage
				Else
					tcMessage = "Este campo es requerido."
				endif
			EndIf	
			If Empty(This.Value)
				This.BorderColor = Rgb(211, 47, 47)
				This.validatedName = Sys(2015)
				If Type("Thisform." + This.validatedName) = "U"
					Thisform.AddObject(This.validatedName, Juststem(This.ClassLibrary) + "._validatemessage")
		
					loValidatedObject 		= Evaluate("Thisform." + This.validatedName)
					loValidatedObject.Left  = This.Left
					loValidatedObject.Top   = This.Top + This.Height
					loValidatedObject.SetMessage(tcMessage)
		
				Endif
			Else
				If Type("Thisform." + This.validatedName) = "O"			
					Thisform.RemoveObject(This.validatedName)
					This.validatedName = ""
				Endif
			Endif
			Return !Empty(This.Value)
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS _toast AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrEffect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrDeltaTime" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: fadein
		*m: fadeout
		*p: ceffect
		*p: neffect
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	BorderStyle = 1
	Caption = "Form"
	ceffect = 
	Closable = .F.
	ControlBox = .F.
	DoCreate = .T.
	Height = 50
	Left = 0
	MaxButton = .F.
	MinButton = .F.
	Name = "_toast"
	neffect = 0
	ShowInTaskBar = .F.
	ShowWindow = 2
	Themes = .F.
	TitleBar = 0
	Top = 0
	Width = 424

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Salir", ;
		Height = 27, ;
		Left = 72, ;
		Name = "Command2", ;
		Top = 48, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Hola Mundo", ;
		Height = 17, ;
		Left = 12, ;
		Name = "Label1", ;
		Top = 17, ;
		Width = 68
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'TmrDeltaTime' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 5000, ;
		Left = 276, ;
		Name = "TmrDeltaTime", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'TmrEffect' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 80, ;
		Left = 228, ;
		Name = "TmrEffect", ;
		Top = 12, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Destroy
		CLEAR DLLS _Sol_SetWindowLong
		CLEAR DLLS _Sol_SetLayeredWindowAttributes
	ENDPROC

	PROCEDURE fadein
	ENDPROC

	PROCEDURE fadeout
	ENDPROC

	PROCEDURE Init
		THIS.CAPTION = "Aviso"
		DECLARE SetWindowLong IN Win32Api AS _Sol_SetWindowLong INTEGER, INTEGER, INTEGER
		DECLARE SetLayeredWindowAttributes IN Win32Api AS _Sol_SetLayeredWindowAttributes INTEGER, STRING, INTEGER, INTEGER
		_Sol_SetWindowLong(THISFORM.HWND, -20, 0x00080000)
		THIS.cEffect = "FADEIN"
		THIS.TmrEffect.ENABLED = .T.
	ENDPROC

	PROCEDURE Command2.Click
		thisform.Release()
	ENDPROC

	PROCEDURE TmrDeltaTime.Timer
		THIS.PARENT.cEffect 			= "FADEOUT"
		THIS.PARENT.tmrEFFECT.ENABLED 	= .T.
	ENDPROC

	PROCEDURE TmrEffect.Timer
		DO CASE
		CASE THIS.PARENT.cEffect = "FADEIN"
			IF THIS.PARENT.nEffect < 250
				_Sol_SetLayeredWindowAttributes(THISFORM.HWND, 0, THIS.PARENT.nEffect, 2)
				THIS.PARENT.nEffect = THIS.PARENT.nEffect + 10
			ELSE
				THIS.ENABLED = .F.
				THIS.PARENT.nEffect = 255
				_Sol_SetLayeredWindowAttributes(THISFORM.HWND, 0, THIS.PARENT.nEffect, 2)
				THIS.PARENT.tmrDeltaTime.ENABLED = .T.
			ENDIF
		CASE THIS.PARENT.cEffect = "FADEOUT"
			IF THIS.PARENT.nEffect > 0
				_Sol_SetLayeredWindowAttributes(THISFORM.HWND, 0, THIS.PARENT.nEffect, 2)
				THIS.PARENT.nEffect = THIS.PARENT.nEffect - 10
			ELSE
				THIS.ENABLED = .F.
				THIS.PARENT.nEffect = 0
				_Sol_SetLayeredWindowAttributes(THISFORM.HWND, 0, THIS.PARENT.nEffect, 2)
				THISFORM.RELEASE()
			ENDIF
		OTHERWISE
		ENDCASE
	ENDPROC

ENDDEFINE

DEFINE CLASS _toogle AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ConBase" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOff" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOff.ShapeOff" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOff.lblTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOn.ShapeOn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ConOn.lblTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.ShapeAnimated" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConBase.Timer1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: controlsource_access
		*m: controlsource_assign
		*m: initcontrols
		*m: setcontrolsource
		*m: setstyle
		*m: setvalue
		*m: value_access
		*m: value_assign
		*p: bcontinue
		*p: caption_off
		*p: caption_on
		*p: controlsource		&& Specifies the source of data to which an object is bound.
		*p: cswitch
		*p: internal
		*p: isdone
		*p: ncounter
		*p: offstyle		&& primary,success,info,warning,danger,default
		*p: onstyle		&& primary,success,info,warning,danger,default
		*p: rgbgfbackcolor
		*p: rgbgfbordercolor
		*p: rgblfbackcolor
		*p: rgblfbordercolor
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	bcontinue = .F.
	BorderWidth = 1
	caption_off = On
	caption_on = Off
	controlsource = .F.		&& Specifies the source of data to which an object is bound.
	cswitch = 
	Height = 30
	internal = .F.
	isdone = .F.
	MousePointer = 15
	Name = "_toogle"
	ncounter = 0
	offstyle = default		&& primary,success,info,warning,danger,default
	onstyle = default		&& primary,success,info,warning,danger,default
	rgbgfbackcolor = .F.
	rgbgfbordercolor = 
	rgblfbackcolor = 
	rgblfbordercolor = 
	value = .F.		&& Specifies the current state of a control.
	Width = 51

	ADD OBJECT 'ConBase' AS container WITH ;
		BackColor = 66,139,202, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 30, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "ConBase", ;
		Top = 0, ;
		Width = 50
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConBase.ConOff' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 30, ;
		Left = 1, ;
		MousePointer = 15, ;
		Name = "ConOff", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 50
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConBase.ConOff.lblTitle' AS label WITH ;
		Alignment = 2, ;
		Anchor = 0, ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontBold = .T., ;
		ForeColor = 255,255,255, ;
		Height = 17, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "lblTitle", ;
		Top = 6, ;
		Width = 50
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ConBase.ConOff.ShapeOff' AS shape WITH ;
		Anchor = 0, ;
		BackColor = 255,255,255, ;
		BorderColor = 204,204,204, ;
		Curvature = 8, ;
		Height = 30, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "ShapeOff", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 50
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'ConBase.ConOn' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 30, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "ConOn", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 50
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConBase.ConOn.lblTitle' AS label WITH ;
		Alignment = 2, ;
		Anchor = 0, ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontBold = .T., ;
		ForeColor = 255,255,255, ;
		Height = 17, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "lblTitle", ;
		Top = 6, ;
		Width = 50
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ConBase.ConOn.ShapeOn' AS shape WITH ;
		BackColor = 66,139,202, ;
		BorderColor = 53,126,189, ;
		Curvature = 8, ;
		Height = 30, ;
		Left = 0, ;
		MousePointer = 15, ;
		Name = "ShapeOn", ;
		Top = 0, ;
		Visible = .T., ;
		Width = 50
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'ConBase.ShapeAnimated' AS shape WITH ;
		BackColor = 255,255,255, ;
		Curvature = 8, ;
		Height = 28, ;
		Left = 39, ;
		MousePointer = 15, ;
		Name = "ShapeAnimated", ;
		Top = 1, ;
		Visible = .T., ;
		Width = 11
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'ConBase.Timer1' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 3, ;
		Left = 0, ;
		Name = "Timer1", ;
		Top = -24, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Click
		this.SetValue()
	ENDPROC

	PROCEDURE controlsource_access
		*To do: Modify this routine for the Access method
		RETURN THIS.CONTROLSOURCE
		
	ENDPROC

	PROCEDURE controlsource_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.CONTROLSOURCE = m.vNewVal
		
	ENDPROC

	PROCEDURE Init
		WITH THIS
			.CONBase.TIMER1.Enabled = .F.
			.BORDERWIDTH = 0
			.SetStyle()
			.InitControls()
			.SetControlSource()
		ENDWITH
	ENDPROC

	PROCEDURE initcontrols
		WITH THIS.ConBase
			.WIDTH 					= THIS.WIDTH * 2
			.HEIGHT 				= THIS.HEIGHT
			.LEFT 					= 0
			.TOP 					= 0
		
			.ConOn.WIDTH 			= THIS.WIDTH
			.ConOff.WIDTH 			= THIS.WIDTH
		
		*-- Animated Shape
			.ShapeAnimated.WIDTH 	= INT(ROUND((22 * THIS.WIDTH) / 100,2))
			.ShapeAnimated.LEFT 	= .ConOn.WIDTH - .ShapeAnimated.WIDTH
			.ShapeAnimated.TOP 		= 1
			.ShapeAnimated.HEIGHT 	= .HEIGHT - 2
		
			.ConOn.LEFT 	= 0
			.ConOn.TOP		= 0
			.ConOn.HEIGHT	= .HEIGHT
		
			.ConOff.LEFT  	= .ConOn.WIDTH - .ShapeAnimated.WIDTH
			.ConOff.TOP		= 0
			.ConOff.HEIGHT	= .HEIGHT
		
			.ConOn.INIT()
			.ConOff.INIT()
		ENDWITH
	ENDPROC

	PROCEDURE setcontrolsource
		WITH THIS
			.INTERNAL = .T.
			IF !EMPTY(.CONTROLSOURCE)
				IF !INLIST(TYPE(EVALUATE(".controlSource")), "L", "N")
					WAIT "Invalid ControlSource for CheckBox: " + .NAME WINDOW
					.CONTROLSOURCE = ""
				ELSE
					.VALUE = EVALUATE(.CONTROLSOURCE)
				ENDIF
			ELSE
				.VALUE = .VALUE
			ENDIF
			.INTERNAL = .F.
		ENDWITH
	ENDPROC

	PROCEDURE setstyle
		#DEFINE STYLE_PRIMARY 	"PRIMARY"
		#DEFINE STYLE_SUCCESS 	"SUCCESS"
		#DEFINE STYLE_INFO 		"INFO"
		#DEFINE STYLE_WARNING 	"WARNING"
		#DEFINE STYLE_DANGER 	"DANGER"
		#DEFINE STYLE_DEFAULT 	"DEFAULT"
		
		#DEFINE COLOR_WHITE				RGB(255, 255, 255)
		#DEFINE COLOR_DEFAULT			RGB(51, 51, 51)
		#DEFINE BACKCOLOR_DEFAULT_OFF	RGB(230, 230, 230)
		
		#DEFINE BACKCOLOR_PRIMARY 	RGB(66, 139, 202)
		#DEFINE BORDERCOLOR_PRIMARY RGB(53, 126, 189)
		
		#DEFINE BACKCOLOR_SUCCESS 	RGB(92, 184, 92)
		#DEFINE BORDERCOLOR_SUCCESS RGB(76, 174, 76)
		
		#DEFINE BACKCOLOR_INFO 		RGB(91, 192, 222)
		#DEFINE BORDERCOLOR_INFO 	RGB(74, 184, 218)
		
		#DEFINE BACKCOLOR_WARNING 	RGB(240, 173, 78)
		#DEFINE BORDERCOLOR_WARNING RGB(238, 162, 54)
		
		#DEFINE BACKCOLOR_DANGER 	RGB(217, 83, 79)
		#DEFINE BORDERCOLOR_DANGER 	RGB(212, 63, 58)
		
		#DEFINE BACKCOLOR_DEFAULT 	RGB(255, 255, 255)
		#DEFINE BORDERCOLOR_DEFAULT RGB(204, 204, 204)
		
		LOCAL RGBBackColor, RGBBorderColor, RGBForeColor
		RGBBackColor 	= BACKCOLOR_DEFAULT
		RGBBorderColor 	= BORDERCOLOR_DEFAULT
		RGBForeColor	= COLOR_WHITE
		
		DO CASE
		CASE THIS.OnStyle   = STYLE_PRIMARY
			RGBBackColor 	= BACKCOLOR_PRIMARY
			RGBBorderColor 	= BORDERCOLOR_PRIMARY
		
		CASE THIS.OnStyle   = STYLE_SUCCESS
			RGBBackColor 	= BACKCOLOR_SUCCESS
			RGBBorderColor 	= BORDERCOLOR_SUCCESS
		
		CASE THIS.OnStyle   = STYLE_INFO
			RGBBackColor 	= BACKCOLOR_INFO
			RGBBorderColor 	= BORDERCOLOR_INFO
		
		CASE THIS.OnStyle   = STYLE_WARNING
			RGBBackColor 	= BACKCOLOR_WARNING
			RGBBorderColor 	= BORDERCOLOR_WARNING
		
		CASE THIS.OnStyle   = STYLE_DANGER
			RGBBackColor 	= BACKCOLOR_DANGER
			RGBBorderColor 	= BORDERCOLOR_DANGER
		
		CASE THIS.OnStyle   = STYLE_DEFAULT
			RGBBackColor 	= BACKCOLOR_DEFAULT
			RGBBorderColor 	= BORDERCOLOR_DEFAULT
			RGBForeColor	= COLOR_DEFAULT
		OTHERWISE
			RGBForeColor	= COLOR_DEFAULT
		ENDCASE
		WITH THIS.conBase.conOn
			.ShapeOn.BACKCOLOR 	= RGBBackColor
			.ShapeOn.BORDERCOLOR 	= RGBBorderColor
			.LBLTitle.FORECOLOR 	= RGBForeColor
			.LBLTitle.CAPTION		= THIS.Caption_on
		ENDWITH
		
		DO CASE
		CASE THIS.OffStyle  = STYLE_PRIMARY
			RGBBackColor 	= BACKCOLOR_PRIMARY
			RGBBorderColor 	= BORDERCOLOR_PRIMARY
		
		CASE THIS.OffStyle  = STYLE_SUCCESS
			RGBBackColor 	= BACKCOLOR_SUCCESS
			RGBBorderColor 	= BORDERCOLOR_SUCCESS
		
		CASE THIS.OffStyle  = STYLE_INFO
			RGBBackColor 	= BACKCOLOR_INFO
			RGBBorderColor 	= BORDERCOLOR_INFO
		
		CASE THIS.OffStyle  = STYLE_WARNING
			RGBBackColor 	= BACKCOLOR_WARNING
			RGBBorderColor 	= BORDERCOLOR_WARNING
		
		CASE THIS.OffStyle  = STYLE_DANGER
			RGBBackColor 	= BACKCOLOR_DANGER
			RGBBorderColor 	= BORDERCOLOR_DANGER
		
		CASE THIS.OffStyle  = STYLE_DEFAULT
			RGBBackColor 	= BACKCOLOR_DEFAULT_OFF
			RGBBorderColor 	= BORDERCOLOR_DEFAULT
			RGBForeColor	= COLOR_DEFAULT
		OTHERWISE
			RGBForeColor	= COLOR_DEFAULT
		ENDCASE
		
		WITH THIS.conBase.conOff
			.ShapeOff.BACKCOLOR 	= RGBBackColor
			.ShapeOff.BORDERCOLOR 	= RGBBorderColor
			.LBLTitle.FORECOLOR 	= RGBForeColor
			.LBLTitle.CAPTION		= THIS.Caption_off
		ENDWITH
	ENDPROC

	PROCEDURE setvalue
		WITH THIS
			DO CASE
			CASE TYPE(".Value") = "L"
				.VALUE = !.VALUE
			CASE TYPE(".Value") = "N"
				.VALUE = IIF(.VALUE = 1, 0, 1)
			OTHERWISE
			ENDCASE
		ENDWITH
	ENDPROC

	PROCEDURE value_access
		*To do: Modify this routine for the Access method
		RETURN THIS.VALUE
		
	ENDPROC

	PROCEDURE value_assign
		LPARAMETERS vNewVal
		WITH THIS
			LOCAL lcSwitchAct as String
			lcSwitchAct = IIF(EMPTY(.cSwitch), IIF(TYPE(".Value") = "L", IIF(vNewVal, "ON", "OFF"), IIF(vNewVal = 1, "ON", "OFF")), .cSwitch)
			.VALUE = m.vNewVal
			IF !EMPTY(.CONTROLSOURCE)
				TRY
					lcMacro = "REPLACE " + GETWORDNUM(.CONTROLSOURCE, 2, ".") + " WITH .Value IN " + GETWORDNUM(.CONTROLSOURCE, 1, ".")
					&lcMacro
				CATCH TO loEx
					WAIT "Error in Checkbox " + .NAME + ", Message: " + loEx.MESSAGE WINDOW
				ENDTRY
			ENDIF
			DO CASE
			CASE TYPE(".Value") = "L"
				.cSwitch = IIF(.VALUE, "ON", "OFF")
			CASE TYPE(".Value") = "N"
				.cSwitch = IIF(.VALUE = 1, "ON", "OFF")
			OTHERWISE
			ENDCASE
			IF lcSwitchAct != .cSwitch
				.CONBASE.TIMER1.ENABLED = .T.
			ENDIF	
		ENDWITH
	ENDPROC

	PROCEDURE ConBase.Click
		THIS.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOff.Click
		this.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOff.Init
		WITH THIS.shapeOff
			.LEFT   = 0
			.TOP 	= 0
			.HEIGHT = THIS.HEIGHT
			.WIDTH  = THIS.WIDTH
		ENDWITH
		
		WITH THIS.lblTitle
			.LEFT 	= THIS.PARENT.shapeAnimated.WIDTH
			.TOP 	= (THIS.HEIGHT / 2) - (THIS.lblTitle.HEIGHT / 2)
			.WIDTH 	= THIS.WIDTH - THIS.PARENT.shapeAnimated.WIDTH
		ENDWITH
	ENDPROC

	PROCEDURE ConBase.ConOff.lblTitle.Click
		this.Parent.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOff.ShapeOff.Click
		this.Parent.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOn.Click
		this.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOn.Init
		WITH THIS.shapeOn
			.LEFT 	= 0
			.TOP 	= 0
			.HEIGHT = THIS.HEIGHT
			.WIDTH 	= THIS.WIDTH
		ENDWITH
		
		WITH THIS.lblTitle
			.LEFT 	= 0
			.TOP 	= (THIS.HEIGHT / 2) - (THIS.lblTitle.HEIGHT / 2)
			.WIDTH  = THIS.WIDTH - THIS.PARENT.shapeAnimated.WIDTH
		ENDWITH
		
	ENDPROC

	PROCEDURE ConBase.ConOn.lblTitle.Click
		this.Parent.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ConOn.ShapeOn.Click
		this.Parent.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.ShapeAnimated.Click
		this.Parent.Parent.Click()
	ENDPROC

	PROCEDURE ConBase.Timer1.Timer
		WITH THIS.PARENT	
			DO CASE
			CASE THIS.PARENT.PARENT.cSwitch == "ON"
				.conOn.shapeOn.VISIBLE = .T.
				IF .LEFT < 0
					.LEFT = .LEFT + 1
				ELSE
					.conOff.shapeOff.VISIBLE 	= .F.
					.shapeAnimated.BORDERCOLOR 	= .conOn.shapeOn.BORDERCOLOR
					THIS.ENABLED  				= .F.
				ENDIF
			CASE THIS.PARENT.PARENT.cSwitch == "OFF"
				.conOff.shapeOff.VISIBLE = .T.
				IF .LEFT > (.PARENT.WIDTH  - .shapeAnimated.WIDTH) * -1
					.LEFT = .LEFT - 1
				ELSE
					.conOn.shapeOn.VISIBLE 		= .F.
					.shapeAnimated.BORDERCOLOR 	= .conOff.shapeOff.BORDERCOLOR
					THIS.ENABLED  				= .F.
				ENDIF
			OTHERWISE
				THIS.ENABLED  = .F.
				RETURN
			ENDCASE
		ENDWITH
	ENDPROC

ENDDEFINE

DEFINE CLASS _validatemessage AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setmessage
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 26
	Name = "_validatemessage"
	Width = 200

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontBold = .T., ;
		ForeColor = 255,255,255, ;
		Height = 17, ;
		Left = 5, ;
		Name = "Label1", ;
		Top = 4, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Anchor = 160, ;
		BackColor = 211,47,47, ;
		BorderColor = 211,47,47, ;
		Curvature = 8, ;
		Height = 26, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 200
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Init
		Lparameters tcMessage as String
		this.setMessage(tcMessage)
	ENDPROC

	PROCEDURE setmessage
		Lparameters tcMessage As String
		If !Empty(tcMessage)
			This.label1.Caption = Alltrim(tcMessage)
			lnWidth 			= Txtwidth(This.label1.Caption, This.label1.FontName, This.label1.FontSize) * Fontmetric(6, This.label1.FontName, This.label1.FontSize)
			This.Width 			= lnWidth + 10
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS bootstrap_alert AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConProgress" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ConProgress.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Timer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setduration
		*m: setstartposition
		*m: setstyle
		*m: settextwidth
		*m: showalert
		*m: startanimation
		*p: bootstrapstyle
		*p: ncount
		*p: nduration
	*</DefinedPropArrayMethod>

	BackStyle = 0
	bootstrapstyle = 1
	BorderWidth = 0
	Height = 50
	Name = "bootstrap_alert"
	ncount = 0
	nduration = 5
	Width = 290

	ADD OBJECT 'ConProgress' AS container WITH ;
		BackColor = 192,192,192, ;
		BorderColor = 192,192,192, ;
		Height = 5, ;
		Left = 25, ;
		Name = "ConProgress", ;
		Top = 40, ;
		Width = 240
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ConProgress.Shape1' AS shape WITH ;
		BackColor = 0,0,0, ;
		BorderColor = 0,0,0, ;
		Height = 5, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 16, ;
		Left = 6, ;
		Name = "Image1", ;
		Stretch = 2, ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontName = "Arial", ;
		FontSize = 10, ;
		Height = 18, ;
		Left = 25, ;
		Name = "Label1", ;
		Top = 16, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BorderWidth = 1, ;
		Curvature = 8, ;
		Height = 50, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 290
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Timer1' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 50, ;
		Left = 108, ;
		Name = "Timer1", ;
		Top = 12, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Init
		THIS.VISIBLE = .F.
	ENDPROC

	PROCEDURE setduration
		LPARAMETERS tnDuration AS INTEGER
		
		THIS.nDuration = IIF(EMPTY(tnDuration), 5, tnDuration)
		IF THIS.nDuration > 2
			THIS.nDuration = ((THIS.nDuration - 1) * 20)
		ELSE
			THIS.nDuration = THIS.nDuration * 20
		ENDIF
	ENDPROC

	PROCEDURE setstartposition
		LPARAMETERS ;
			tnStartPosition AS INTEGER, ;
			tnLeft			AS INTEGER, ;
			tnTop 			AS INTEGER
		
		#DEFINE top_left 		1
		#DEFINE top_center 		2
		#DEFINE top_right 		3
		#DEFINE middle_left 	4
		#DEFINE middle_center 	5
		#DEFINE middle_right 	6
		#DEFINE bottom_left 	7
		#DEFINE bottom_center 	8
		#DEFINE bottom_right 	9
		
		LOCAL nLeft AS INTEGER, nTop AS INTEGER
		STORE 0 TO nLeft, nTop
		
		IF BETWEEN(tnStartPosition, 1, 9)
			DO CASE
			CASE tnStartPosition = top_left
				nLeft = 10
				nTop  = 10
		
			CASE tnStartPosition = top_center
				nLeft = (THISFORM.WIDTH / 2) - (THIS.WIDTH / 2)
				nTop  = 10
		
			CASE tnStartPosition = top_right
				nLeft = (THISFORM.WIDTH - THIS.WIDTH) - 10
				nTop  = 10
		
			CASE tnStartPosition = middle_left
				nLeft = 10
				nTop  = (THISFORM.HEIGHT / 2) - (THIS.HEIGHT / 2)
		
			CASE tnStartPosition = middle_center
				nLeft = (THISFORM.WIDTH / 2) - (THIS.WIDTH / 2)
				nTop  = (THISFORM.HEIGHT / 2) - (THIS.HEIGHT / 2)
		
			CASE tnStartPosition = middle_right
				nLeft = (THISFORM.WIDTH - THIS.WIDTH) - 10
				nTop  = (THISFORM.HEIGHT / 2) - (THIS.HEIGHT / 2)
		
			CASE tnStartPosition = bottom_left
				nLeft = 10
				nTop  = (THISFORM.HEIGHT - THIS.HEIGHT) - 10
		
			CASE tnStartPosition = bottom_center
				nLeft = (THISFORM.WIDTH / 2) - (THIS.WIDTH / 2)
				nTop  = (THISFORM.HEIGHT - THIS.HEIGHT) - 10
		
			CASE tnStartPosition = bottom_right
				nLeft = (THISFORM.WIDTH - THIS.WIDTH) - 10
				nTop  = (THISFORM.HEIGHT - THIS.HEIGHT) - 10
		
			OTHERWISE
			ENDCASE
		ELSE
			IF tnLeft > 0 AND tnTop > 0
				nLeft = tnLeft
				nTop  = tnTop
			ELSE
				nLeft = 10
				nTop  = 10
			ENDIF
		ENDIF
		THIS.LEFT 	= nLeft
		THIS.TOP 	= nTop
	ENDPROC

	PROCEDURE setstyle
		LPARAMETERS tnStyle AS INTEGER, tcImageAlert AS STRING
		
		IF EMPTY(tnStyle) OR tnStyle > 8
			tnStyle = 1
		ENDIF
		
		#DEFINE alert_primary 	1
		#DEFINE alert_secondary 2
		#DEFINE alert_success 	3
		#DEFINE alert_danger 	4
		#DEFINE alert_warning 	5
		#DEFINE alert_info 		6
		#DEFINE alert_light 	7
		#DEFINE alert_dark 		8
		#DEFINE info_image		"info.png"
		#DEFINE success_image	"success.png"
		#DEFINE danger_image	"danger.png"
		#DEFINE warning_image	"warning.png"
		#define Base64Binary	14
		
		RGBBackColor 			= RGB(240, 240, 240)
		RGBBorderColor 			= RGB(240, 240, 240)
		RGBProgressBackColor 	= RGB(240, 240, 240)
		RGBProgressFillColor 	= RGB(240, 240, 240)
		RGBForeColor			= RGB(255, 255, 255)
		cImage					= "info.png"
		
		DO CASE
		CASE tnStyle = alert_primary
			RGBBackColor 			= RGB(204, 229, 255)
			RGBBorderColor 			= RGB(184, 218, 255)
			RGBProgressBackColor 	= RGB(184, 218, 255)
			RGBProgressFillColor 	= RGB(125, 187, 255)
			RGBForeColor			= RGB(0, 64, 133)
			cImage					= "info.png"
		
		CASE tnStyle = alert_secondary
			RGBBackColor 			= RGB(226, 227, 229)
			RGBBorderColor 			= RGB(214, 216, 219)
			RGBProgressBackColor 	= RGB(214, 216, 219)
			RGBProgressFillColor 	= RGB(176, 180, 187)
			RGBForeColor			= RGB(46, 61, 65)
			cImage					= "info.png"
		
		CASE tnStyle = alert_success
			RGBBackColor 			= RGB(212, 237, 218)
			RGBBorderColor 			= RGB(195, 230, 203)
			RGBProgressBackColor 	= RGB(165, 218, 176)
			RGBProgressFillColor 	= RGB(94, 189, 113)
			RGBForeColor			= RGB(21, 87, 36)
			cImage					= "success.png"
		
		CASE tnStyle = alert_danger
			RGBBackColor 			= RGB(248, 215, 218)
			RGBBorderColor 			= RGB(245, 198, 203)
			RGBProgressBackColor 	= RGB(245, 198, 203)
			RGBProgressFillColor 	= RGB(236,147,155)
			RGBForeColor			= RGB(114, 28, 36)
			cImage					= "danger.png"
		
		CASE tnStyle = alert_warning
			RGBBackColor 			= RGB(255, 243, 205)
			RGBBorderColor 			= RGB(255, 238, 186)
			RGBProgressBackColor 	= RGB(255,226,140)
			RGBProgressFillColor 	= RGB(253,190,0)
			RGBForeColor			= RGB(133, 100, 4)
			cImage					= "warning.png"
		
		CASE tnStyle = alert_info
			RGBBackColor 			= RGB(209, 236, 241)
			RGBBorderColor 			= RGB(190, 229, 235)
			RGBProgressBackColor 	= RGB(190, 229, 235)
			RGBProgressFillColor 	= RGB(115,201,213)
			RGBForeColor			= RGB(12, 84, 96)
			cImage					= "info.png"
		
		CASE tnStyle = alert_light
			RGBBackColor 			= RGB(254, 254, 254)
			RGBBorderColor 			= RGB(200,200,200)
			RGBProgressBackColor 	= RGB(224,224,224)
			RGBProgressFillColor 	= RGB(181,181,181)
			RGBForeColor			= RGB(129, 129, 130)
			cImage					= "info.png"
		
		CASE tnStyle = alert_dark
			RGBBackColor 			= RGB(214, 216, 217)
			RGBBorderColor 			= RGB(198, 200, 202)
			RGBProgressBackColor 	= RGB(198, 200, 202)
			RGBProgressFillColor 	= RGB(151, 155, 159)
			RGBForeColor			= RGB(27, 30, 33)
			cImage					= "info.png"
		
		OTHERWISE
		ENDCASE
		cImage = IIF(!EMPTY(tcImageAlert), tcImageAlert, cImage)
		cBinaryImage = 0h
		
		DO CASE
		CASE cImage = info_image
			TEXT TO lcImageStr noshow
		iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAABvAAAAbwHxotxDAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAJNQTFRF////////jcP/vN3/i7//v93/i8H/i7//v9v/jMD/v9v/i8D/wNz/i8D/v9z/i8D/i8D/v9z/LXnML3vNMHvNMnzOOJf/O5n/PJn/Ppr/SI7bXJzmXJ3mXprcX6v/YaDoY53eb6vwcrX/d7j/fK/ofLr/gr3/g7r6ir//lsf/os7/s9b/udj8vtv/v9z/8vj/////DFL7+wAAABJ0Uk5TAAEmJnBwf4CAs7O1tebm5/b2lCrXIgAAAI5JREFUGFdlj9kWgkAMQwuCAipCxYorIruI+v9f53Q6vjh5yz0nTQqgNAuieBMuXBA5fjoOzansEs/RfjW1ORFiVvRLJv50JaL7BRGPvafyaas8vZ8KYJG4EIw5g+rGIOvmEA3s6bBjgGUIcaP956XJeW0DifyAishRA/io1BrAtTJs/6i3Zpg93Xru7/0vQHUTYr+4YEUAAAAASUVORK5CYII=
			ENDTEXT
		
		CASE cImage = success_image
			TEXT TO lcImageStr noshow
		iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAABwAAAAcAHOeGKTAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAANJQTFRF////AP8AAKpVAKpVL7x5HrF1HK90Mrt7Mrt8Mrl8Mrt8Mrp7Mbp8FqdxFKdxFqhyJ7N4FqhyFadyMrp8EaVwMrp8FqhzDaJvCqBuC6BuC6FuDKJvDaJvEaNyFKR0FaR0FqR1GqpzHKd4KrV5MLd9Mrp8M7p9NLt9RMCIRcCISMGKTL6RT8SOX8mZYMmZZsydcc+kcs+lctClc9Cmf9Stp+HHrePLwujbw+jcxOjcxend2PDo3vTq6Pjw7Pj08vv39Pv4+v38+/78/P79/f7+////Cysg7AAAABh0Uk5TAAEDBiY7QHB/gLO0tb2/wsPH5ebs9vf9AIhFPwAAAKdJREFUGFdFj9cagjAMhYuiFcSJ1bgHxr333nn/V7Itgucq/8mXcRiTMi3bdW3LZL4MLlBLcEOzg6Ec5fAQ+4hczouAF/dtT5jMCnj5IhpjgtmI890QcSX5VG8nmYuTJ10Ga8nHFkBRGqMH0fVNdGgCQEmNTKVDtFcMBb10JvvnhmLI+Wc3n1tHcyX+e6xb0wyp8HVPO/noP5xXhXI68sur42czMVV/AbxXHRk7XvMsAAAAAElFTkSuQmCC
			ENDTEXT
		
		CASE cImage = danger_image
			TEXT TO lcImageStr noshow
		iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAbwAAAG8B8aLcQwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAHcSURBVDiNfZNNaxNRFIafc+dOZjJpYkKjNWCttbGRVkFIobgQKuJGREVw49q1INVdURdu7ULob9CFi25cuPIXpC3FnVKVNsFWSahhbDJh5rqRlMnXgbt53+e8nHPgYoxh6AP1CfQoRjGkqlJ6UqP022Yq2JTz68O4gQF7Urplo1fzZHMzeCJYd7dk5sUgVowxMeGrXHA81OdxskWdHOOn62M1mnzjb0eh84vmy5+RE6TQy0ncoo3mYH2N2oePRIRM4NoJovcjV6hJcRLMShoPgPBsgVA7AHhAgLm5LdOLQwME/TpNKqkGnCbCMEmSNhKboktWpXTDwnrg4fY1H1eIgz6zLcWnsYCKLNiCepMhFcOl6SMmimmnsPEJX1VkwQPQAKfxH7sk5hLYMXj80QrBVK5nlZAJXOeQxjvgjvohcwUFLzP/D3e8nCIoz9Naug5axywP6GBub8nsFesZ+dU0yasOiRjUulamvvacg9w5nKiFvbHZ9QyQISGHBEsKzD23pxnA3tlFNX2UgF3Z6PMVhjbRrDbwvU3npIcVA6y9fQrl+4h7hNTrfQERgkaOZJeLlxXRW4U1L30YVAn6tBBDh6idQj3s/oVfcmnMx9e9cAM50atloTVtdvYB/gG0QbCJx4LfUQAAAABJRU5ErkJggg==
			ENDTEXT
		
		CASE cImage = warning_image
			TEXT TO lcImageStr noshow
		iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAbwAAAG8B8aLcQwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAITSURBVDiNfVNNaBNREP7mdXeTpiFJpYnSf2nTJlYRKdUoWhrUJEpaqtU1jSJsSAWhFC89N8WTlxRPgr140pMH8SIiRKQHsSDUkxT8B7Hpn0i0yiY7HlIky2598B7MN998M2/eGzAzdtrDV6+1Hxk60/o/joDNIiIau5yZb5T0T82N/OX4ydg8EZEdV7IDx9KZiX0dyE5fFJCpGbfuFbPEsUUAdy3JmNkEnNM0n2LQcn6izt/SVMVK67+RzK2sUlnvKRQK32v5liuIP5hJ9JO/pQl4/obxaOEX3Luc0Aadfh3KjIVfa1xIayGvmybVwSr8+CXj4YsSQEA65oXXhclj0XhoRwEWYi41JKQGp7UvsseJG/F6SRDmbAXOX8kkOwNInD5k22yAgFNHPegOUOJENJ40CaiqqhAjn4kT7B9rW8PtwPRZFwzB+f2qqvwTKMvuqUiYgn0d5ugDe4GDXYqpir5wA6JBKehb35wCABoZz+52yZXl29frPAGfOSNvH6aqGCi+3cD4ndKPn0alR8hUzg1HyBIMAE8WGQ+elSy9CLS6kBqQPVJF5AQTjY5EbH80OvcAve2y1eF24NKADBCNCjCWPnxjKwlAuI3Q3+uwOvQK3q8aIPCSxEyzN+9XukNtokuxmYzNjTWT7ZSArZKO1x/1d4bgWWLm6vSltMMkcX0t2TAEFb9+tpZHYmuh8PQVM/NfKfHCdnYDhr4AAAAASUVORK5CYII=
			ENDTEXT
		
		OTHERWISE
		ENDCASE
		cBinaryImage = STRCONV(lcImageStr, Base64Binary)
		
		WITH THIS
			.shape1.BACKCOLOR 	= RGBBackColor
			.shape1.BORDERCOLOR = RGBBorderColor
			WITH .conprogress
				.BACKCOLOR 			= RGBProgressBackColor
				.BORDERCOLOR 		= RGBProgressBackColor
				.shape1.BACKCOLOR 	= RGBProgressFillColor
				.shape1.BORDERCOLOR = RGBProgressFillColor
			ENDWITH
			.label1.FORECOLOR 		= RGBForeColor
			.image1.PictureVal 		= cBinaryImage
		ENDWITH
	ENDPROC

	PROCEDURE settextwidth
		LPARAMETERS tcMessage AS STRING
		
		cFontName 	= THIS.label1.FONTNAME
		nFontSize 	= THIS.label1.FONTSIZE
		cCaption 	= ALLTRIM(tcMessage)
		nPadding	= 50
		nAnchoCar 	= FONTMETRIC(6, cFontName, nFontSize, "")
		nLongitud 	= (TXTWIDTH(cCaption, cFontName, nFontSize, "") * nAnchoCar) + nPadding
		
		WITH THIS
			.WIDTH 				= nLongitud
			.shape1.WIDTH 		= nLongitud
			.label1.CAPTION 	= cCaption
			WITH .conprogress
				.WIDTH 			= nLongitud - nPadding
				.shape1.WIDTH 	= nLongitud - nPadding
			ENDWITH
		ENDWITH
	ENDPROC

	PROCEDURE showalert
		LPARAMETERS ;
			tcMessage 		AS STRING, ;
			tnDuration 		AS INTEGER, ;
			tnStyle 		AS INTEGER, ;
			tnStartPosition AS INTEGER, ;
			tnLeft			AS INTEGER, ;
			tnTop 			AS INTEGER, ;
			tcImageAlert	as string
		
		THIS.setStyle(tnStyle, tcImageAlert)
		THIS.setDuration(tnDuration)
		THIS.setTextWidth(tcMessage)
		THIS.setStartPosition(tnStartPosition, tnLeft, tnTop)
		THIS.startAnimation()
	ENDPROC

	PROCEDURE startanimation
		THIS.nCount			= 0
		THIS.timer1.ENABLED = .T.
	ENDPROC

	PROCEDURE Timer1.Timer
		THIS.ENABLED 		= .F.
		nDuration = THIS.PARENT.nDuration
		IF THIS.PARENT.nCount < nDuration
			THIS.PARENT.nCount = THIS.PARENT.nCount + 1
		
			nLong = THIS.PARENT.conProgress.WIDTH
			nPor = INT(ROUND((THIS.PARENT.nCount / nDuration) * 100,2))
			nProgress = INT(ROUND((nPor * nLong) / 100,2))
			THIS.PARENT.conProgress.shape1.WIDTH = nProgress
			THIS.ENABLED = .T.
		ENDIF
		THIS.PARENT.VISIBLE = (THIS.PARENT.nCount < nDuration)
	ENDPROC

ENDDEFINE

DEFINE CLASS notification AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lclMessage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrShow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrPause" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TmrClose" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: showmessage
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 81
	Name = "notification"
	Width = 400

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 16, ;
		Left = 12, ;
		Name = "Image1", ;
		Picture = ..\foxservice\src\graphics\info.png, ;
		Top = 32, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "r", ;
		FontName = "Marlett", ;
		FontSize = 15, ;
		ForeColor = 128,128,128, ;
		Height = 20, ;
		Left = 369, ;
		MousePointer = 15, ;
		Name = "Label1", ;
		Top = 30, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lclMessage' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "La URL de la petición está vacía", ;
		FontBold = .T., ;
		ForeColor = 80,80,80, ;
		Height = 17, ;
		Left = 36, ;
		Name = "lclMessage", ;
		Top = 32, ;
		Width = 181
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 237,75,72, ;
		BorderColor = 237,75,72, ;
		Curvature = 10, ;
		Height = 81, ;
		Left = 0, ;
		Name = "Shape1", ;
		Top = 0, ;
		Width = 388
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackColor = 250,250,250, ;
		BorderColor = 250,250,250, ;
		Curvature = 0, ;
		Height = 81, ;
		Left = 4, ;
		Name = "Shape2", ;
		Top = 0, ;
		Width = 390
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape3' AS shape WITH ;
		BackColor = 250,250,250, ;
		BorderColor = 250,250,250, ;
		Curvature = 10, ;
		Height = 81, ;
		Left = 24, ;
		Name = "Shape3", ;
		Top = -1, ;
		Width = 376
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape4' AS shape WITH ;
		BackColor = 250,250,250, ;
		BorderColor = 250,250,250, ;
		BorderWidth = 1, ;
		Curvature = 10, ;
		Height = 81, ;
		Left = 351, ;
		MousePointer = 15, ;
		Name = "Shape4", ;
		Top = 0, ;
		Width = 49
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'TmrClose' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 2, ;
		Left = 224, ;
		Name = "TmrClose", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'TmrPause' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 3000, ;
		Left = 188, ;
		Name = "TmrPause", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'TmrShow' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 1, ;
		Left = 152, ;
		Name = "TmrShow", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Init
		This.Left = This.Parent.Width
		This.Top  = This.Parent.Height - (this.Height + 25)
	ENDPROC

	PROCEDURE showmessage
		Lparameters tcMessage As String
		This.lclMessage.Caption = tcMessage
		This.tmrShow.Enabled = .T.
	ENDPROC

	PROCEDURE Label1.Click
		this.Parent.SHApe4.CLICK()
	ENDPROC

	PROCEDURE Label1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.shape4.MouseEnter(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Label1.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.shape4.MouseLeave(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Shape4.Click
		This.Parent.TmrShow.Enabled  = .F.
		This.Parent.TmrPause.Enabled = .F.
		This.Parent.tmrclose.Enabled = .T.
	ENDPROC

	PROCEDURE Shape4.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BackColor = Rgb(240, 240, 240)
	ENDPROC

	PROCEDURE Shape4.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BackColor = Rgb(250, 250, 250)
	ENDPROC

	PROCEDURE TmrClose.Timer
		lnMax = Thisform.Height + 100
		If This.Parent.Top < lnMax
			This.Parent.Top = This.Parent.Top + 1
		Endif
		
		If This.Parent.Top >= lnMax
			This.Enabled = .F.
		Endif
	ENDPROC

	PROCEDURE TmrPause.Timer
		this.Enabled = .f.
		this.Parent.TmrClose.Enabled = .t.
	ENDPROC

	PROCEDURE TmrShow.Timer
		lnMax = Thisform.Width - (This.Parent.Width + 25)
		If This.Parent.Left > lnMax
			This.Parent.Left = This.Parent.Left - 2
		Endif
		If This.Parent.Left <= lnMax
			This.Enabled = .F.
			This.Parent.tmrPause.Enabled = .T.
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS passwordviewer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: ctextbox
		*p: otextbox
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	ctextbox = 
	Height = 21
	Name = "passwordviewer"
	otextbox = 
	Width = 21

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "h", ;
		FontName = "Marlett", ;
		FontSize = 12, ;
		Height = 18, ;
		Left = 1, ;
		Name = "Label1", ;
		Top = 2, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = ")", ;
		FontBold = .T., ;
		FontName = "Times New Roman", ;
		FontSize = 12, ;
		Height = 17, ;
		Left = -8, ;
		Name = "Label2", ;
		Rotation = 90, ;
		Top = -4, ;
		Width = 36
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE Init
		If !Empty(This.cTextbox)
			This.oTextbox = Evaluate(This.cTextbox)
		Else
			This.oTextbox = .Null.
		Endif
		
	ENDPROC

	PROCEDURE MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		If nButton = 1 And !Isnull(This.otextbox)
			This.otextbox .FontName = "Arial"
			This.otextbox .PasswordChar = ""
		Endif
		
	ENDPROC

	PROCEDURE MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		If nButton = 1 And !Isnull(This.otextbox)
			This.otextbox .FontName = "Wingdings"
			This.otextbox .PasswordChar = "l"
		Endif
	ENDPROC

	PROCEDURE Label1.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
		
	ENDPROC

	PROCEDURE Label1.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Label2.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE Label2.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.Parent.MouseUp(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE
